<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>TeLis Video Classroom</title>

  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link rel="stylesheet" href="./../../bootstrap.min.css">
  <link rel="stylesheet" href="./../../style.css">

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
</head>

<body>
  <main class="container-fluid d-flex flex-column home-wrap">
    <div id="meetingbox" style="display:none;">
      <p>No meeting joined! <a id='meetingid' href="#"></a></p>
    </div>

    <div class="g-top text-light">
      <div class="top-remote-video-show-wrap d-flex flex-wrap">
        <!-- Video Section -->
        <div id="meetingContainer" style="display:none;flex-basis:75%;">
          <h1 id='meetingname'></h1>
          <div class="call-wrap bg-black p-2">
            <div id='divUsers' class="video-wrap d-flex flex-wrap">
              <!-- Local video -->
              <div id="me" class="userbox d-flex flex-column align-items-center m-1">
                <h2 class="user-name text-center" style="font-size:14px;"></h2>
                <video id="localVideoCtr" autoplay muted playsinline class="video-box"></video>
              </div>
              <!-- Remote template -->
              <div id="otherTemplate" class="userbox d-flex flex-column align-items-center m-1" style="display:none">
                <h2 class="user-name text-center" style="font-size:14px;"></h2>
                <video autoplay playsinline class="video-box"></video>
                <audio autoplay controls style="display:none;"></audio>
              </div>
            </div>
          </div>
        </div>

        <!-- Sidebar -->
        <div class="g-right-details-wrap bg-light text-secondary h-100 p-2" style="flex-basis:25%;display:none;">
          <h5>Participants</h5>
          <ul id="participantsList" class="list-group mb-2"></ul>
          <h5>Chat</h5>
          <div id="messages" style="height:300px; overflow-y:auto; border:1px solid #ccc; padding:5px;"></div>
          <div class="input-group mt-2">
            <input type="text" id="msgbox" class="form-control" placeholder="Type a message">
            <button id="btnSendMsg" class="btn btn-primary">Send</button>
          </div>
        </div>
      </div>

      <div class="mt-3">
        <button id="start-recording" class="btn btn-danger">Start Recording</button>
        <button id="download-video" class="btn btn-success" disabled>Download Recording</button>
      </div>
    </div>
  </main>

  <script>
    const socket = io();
    let localStream;
    let transports = [];
    let producers = [];
    let consumers = [];
    let userID, meetingID;

    $(function () {
      const urlParams = new URLSearchParams(window.location.search);
      meetingID = urlParams.get('meetingID');
      userID = urlParams.get('uid') || prompt('Enter your nickname');

      if (!meetingID || !userID) {
        $("#meetingbox").show();
        $("#meetingContainer").hide();
        return;
      }
      $("#meetingContainer").show();

      // Get local stream
      navigator.mediaDevices.getUserMedia({ video: true, audio: true })
        .then(stream => {
          localStream = stream;
          $("#localVideoCtr")[0].srcObject = stream;
          socket.emit("joinMeeting", { meetingID, userID });
          initChat();
        }).catch(err => alert("Camera/Mic access failed: " + err.message));

      // Participants update
      socket.on('existingParticipants', participants => {
        participants.forEach(pID => connectToPeer(pID, true));
      });

      socket.on('userJoined', ({ userID: newUser }) => connectToPeer(newUser, true));

      socket.on('receiveMessage', ({ userID: from, msg }) => {
        const div = document.createElement('div');
        div.textContent = `${from}: ${msg}`;
        document.getElementById('messages').appendChild(div);
        document.getElementById('messages').scrollTop = document.getElementById('messages').scrollHeight;
      });

      function initChat() {
        $("#btnSendMsg").on('click', sendChat);
        $("#msgbox").on('keypress', e => { if (e.key === 'Enter') sendChat(); });
      }

      function sendChat() {
        const text = $("#msgbox").val().trim();
        if (text) {
          socket.emit('sendMessage', { meetingID, userID, msg: text });
          $("#msgbox").val('');
        }
      }

      const peers = {};
      function connectToPeer(peerID, isInitiator) {
        if (peers[peerID]) return;

        const pc = new RTCPeerConnection();
        peers[peerID] = pc;

        localStream.getTracks().forEach(t => pc.addTrack(t, localStream));

        pc.ontrack = e => {
          let remoteDiv = document.getElementById('remote_' + peerID);
          if (!remoteDiv) {
            let clone = $("#otherTemplate").clone().attr("id", "remote_" + peerID).show();
            clone.find(".user-name").text(peerID);
            clone.find("video")[0].srcObject = e.streams[0];
            $("#divUsers").append(clone);
          }
        };

        pc.onicecandidate = e => {
          if (e.candidate) socket.emit('signal', { targetID: peerID, fromID: userID, signal: { candidate: e.candidate } });
        };

        if (isInitiator) {
          pc.createOffer().then(offer => {
            pc.setLocalDescription(offer);
            socket.emit('signal', { targetID: peerID, fromID: userID, signal: { sdp: offer } });
          });
        }

        socket.on('signal', async ({ fromID, signal }) => {
          if (!peers[fromID]) connectToPeer(fromID, false);
          const pc = peers[fromID];
          if (signal.sdp) {
            await pc.setRemoteDescription(new RTCSessionDescription(signal.sdp));
            if (signal.sdp.type === 'offer') {
              const answer = await pc.createAnswer();
              await pc.setLocalDescription(answer);
              socket.emit('signal', { targetID: fromID, fromID: userID, signal: { sdp: answer } });
            }
          } else if (signal.candidate) {
            await pc.addIceCandidate(new RTCIceCandidate(signal.candidate));
          }
        });
      }
    });
  </script>

  <style>
    .video-box { width: 100%; max-width: 250px; height: auto; background: black; }
    .userbox { margin: 5px; display: flex; flex-direction: column; align-items: center; }
    @media screen and (max-width: 768px) {
      .top-remote-video-show-wrap { flex-direction: column; }
      #meetingContainer { flex-basis: 100% !important; }
      .g-right-details-wrap { flex-basis: 100% !important; margin-top: 10px; }
    }
  </style>
</body>
</html>
