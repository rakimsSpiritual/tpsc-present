<!DOCTYPE html>
<html>

<head>
    <meta name="viewport" content="width=device-width" />
    <title>TeLis Video Classromm</title>
    <link href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css" rel="stylesheet">
    <script src="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="./../../bootstrap.min.css">
    <link rel="stylesheet" href="./../../style.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>
    <script src="./../../jquery-3.4.1.min.js"></script>
    <script src="./../../app.js"></script>
</head>

<body>
    <div id="meetingbox" style="display: none;">
        <p>It seems you are not trying to join any meeting!
            You may start a new meeting. Here is generated for you. <a id='meetingid' href="#"></a>
        </p>
    </div>

    <main class="container-fluid d-flex flex-column home-wrap">
        <div class="g-top text-light">
            <div class="top-remote-video-show-wrap d-flex">
                <div id="meetingContainer" style="display: none;flex-basis: 75%;">
                    <h1 id='meetingname'></h1>
                    <div class="call-wrap " style="background-color: black;">
                        <div id='divUsers' class="video-wrap" style="display:flex;flex-wrap: wrap;">
                            <div id="me" class="userbox div-center-column">
                                <h2 class="display-center user-name" style="font-size: 14px;"></h2>
                                <div class="display-center">
                                    <video autoplay muted id="localVideoCtr" playsinline class="video-box"></video>
                                </div>
                            </div>
                            <div id="otherTemplate" class="userbox div-center-column" style="display:none">
                                <h2 class="display-center user-name" style="font-size: 14px;"></h2>
                                <div class="display-center">
                                    <video autoplay playsinline class="video-box"></video>
                                    <audio autoplay controls style="display:none"></audio>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="g-right-details-wrap bg-light text-secondary h-100" style="flex-basis: 25%;z-index: 1;display: none;">
                    <!-- your sidebar/chat/participants UI untouched -->
                    <!-- ... keep all your original sidebar code ... -->
                </div>
            </div>

            <!-- your bottom controls untouched -->
            <!-- ... keep all your original bottom controls code ... -->

        </div>

        <!-- recording, leave meeting, hidden inputs -->
        <!-- ... keep all your original recording, modals, hidden fields ... -->

    </main>

    <!-- Embedded Full WebRTC & Socket.IO Logic -->
    <script>
        $(function () {
            const urlParams = new URLSearchParams(window.location.search);
            const meetingID = urlParams.get('meetingID');
            let userID = urlParams.get('uid');
            if (!userID) userID = prompt('Enter your nickname');
            if (!meetingID || !userID) {
                $("#meetingbox").show();
                $("#meetingContainer").hide();
                return;
            }

            $("#meetingContainer").show();
            $(".username_holder").val(userID);

            const socket = io(); // Connect to your server
            const peers = {}; // store RTCPeerConnections keyed by remote userID
            const localVideo = document.getElementById('localVideoCtr');
            let localStream;

            async function initMedia() {
                try {
                    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                    localVideo.srcObject = localStream;
                } catch (err) {
                    alert('Error accessing camera/mic: ' + err.message);
                }
            }

            function addRemoteVideo(userID, stream) {
                let template = document.getElementById('otherTemplate');
                let clone = template.cloneNode(true);
                clone.style.display = 'flex';
                clone.id = 'remote_' + userID;
                clone.querySelector('.user-name').textContent = userID;
                let videoEl = clone.querySelector('video');
                videoEl.srcObject = stream;
                document.getElementById('divUsers').appendChild(clone);
            }

            function removeRemoteVideo(userID) {
                let el = document.getElementById('remote_' + userID);
                if (el) el.remove();
            }

            initMedia().then(() => {
                socket.emit('joinMeeting', { meetingID, userID });
            });

            // When new participant joins
            socket.on('newParticipant', async ({ id }) => {
                if (id === userID) return;
                const peerConnection = new RTCPeerConnection();
                peers[id] = peerConnection;

                // Add local tracks
                localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

                // Handle remote track
                peerConnection.ontrack = (event) => {
                    addRemoteVideo(id, event.streams[0]);
                };

                // ICE candidates
                peerConnection.onicecandidate = (event) => {
                    if (event.candidate) {
                        socket.emit('signal', { targetID: id, fromID: userID, signal: { candidate: event.candidate } });
                    }
                };

                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                socket.emit('signal', { targetID: id, fromID: userID, signal: { sdp: offer } });
            });

            // Handle signals
            socket.on('signal', async ({ fromID, signal }) => {
                if (!peers[fromID]) {
                    const pc = new RTCPeerConnection();
                    peers[fromID] = pc;

                    localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

                    pc.ontrack = (event) => addRemoteVideo(fromID, event.streams[0]);
                    pc.onicecandidate = (event) => {
                        if (event.candidate) socket.emit('signal', { targetID: fromID, fromID: userID, signal: { candidate: event.candidate } });
                    };
                }

                const pc = peers[fromID];

                if (signal.sdp) {
                    await pc.setRemoteDescription(new RTCSessionDescription(signal.sdp));
                    if (signal.sdp.type === 'offer') {
                        const answer = await pc.createAnswer();
                        await pc.setLocalDescription(answer);
                        socket.emit('signal', { targetID: fromID, fromID: userID, signal: { sdp: answer } });
                    }
                } else if (signal.candidate) {
                    await pc.addIceCandidate(new RTCIceCandidate(signal.candidate));
                }
            });

            // Remove participant
            socket.on('participantLeft', (id) => {
                removeRemoteVideo(id);
                if (peers[id]) peers[id].close();
                delete peers[id];
            });

            // Chat
            socket.on('message', ({ from, text }) => {
                const div = document.createElement('div');
                div.textContent = `${from}: ${text}`;
                document.getElementById('messages').appendChild(div);
            });

            $('#btnSendMsg').on('click', () => {
                const text = $('#msgbox').val();
                if (text.trim() !== '') {
                    socket.emit('sendMessage', { meetingID, from: userID, text });
                    $('#msgbox').val('');
                }
            });
        });
    </script>

    <style>
        .video-box {
            width: 250px;
            height: 180px;
            background: black;
        }
        .userbox {
            position: relative;
            margin: 5px;
        }
    </style>
</body>

</html>
