<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TeLis Video Classroom</title>

    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="./../../bootstrap.min.css">
    <link rel="stylesheet" href="./../../style.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/mediasoup-client@3/lib/index.js"></script>
</head>

<body>
<main class="container-fluid d-flex flex-column home-wrap">
    <div id="meetingbox" style="display:none;">
        <p>No meeting joined! <a id='meetingid' href="#"></a></p>
    </div>

    <div class="g-top text-light">
        <div class="top-remote-video-show-wrap d-flex flex-wrap">
            <!-- Video Section -->
            <div id="meetingContainer" style="display:none;flex-basis:75%;">
                <h1 id='meetingname'></h1>
                <div class="call-wrap bg-black p-2">
                    <div id='divUsers' class="video-wrap d-flex flex-wrap">
                        <!-- Local video -->
                        <div id="me" class="userbox d-flex flex-column align-items-center m-1">
                            <h2 class="user-name text-center" style="font-size:14px;"></h2>
                            <video id="localVideoCtr" autoplay muted playsinline class="video-box"></video>
                        </div>
                        <!-- Remote template -->
                        <div id="otherTemplate" class="userbox d-flex flex-column align-items-center m-1" style="display:none">
                            <h2 class="user-name text-center" style="font-size:14px;"></h2>
                            <video autoplay playsinline class="video-box"></video>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="g-right-details-wrap bg-light text-secondary h-100 p-2" style="flex-basis:25%;display:none;">
                <h5>Participants</h5>
                <ul id="participantsList" class="list-group mb-2"></ul>
                <h5>Chat</h5>
                <div id="messages" style="height:300px; overflow-y:auto; border:1px solid #ccc; padding:5px;"></div>
                <div class="input-group mt-2">
                    <input type="text" id="msgbox" class="form-control" placeholder="Type a message">
                    <button id="btnSendMsg" class="btn btn-primary">Send</button>
                </div>
            </div>
        </div>

        <div class="mt-3">
            <button id="start-recording" class="btn btn-danger">Start Recording</button>
            <button id="download-video" class="btn btn-success" disabled>Download Recording</button>
        </div>
    </div>
</main>

<script>
$(function () {
    const urlParams = new URLSearchParams(window.location.search);
    const meetingID = urlParams.get('meetingID');
    let userID = urlParams.get('uid');
    if (!userID) userID = prompt('Enter your nickname');
    if (!meetingID || !userID) {
        $("#meetingbox").show();
        $("#meetingContainer").hide();
        return;
    }
    $("#meetingContainer").show();

    const socket = io();
    const localVideo = document.getElementById('localVideoCtr');
    const peers = {}; // consumer video elements
    let device;
    let sendTransport;
    let recvTransport;
    let localStream;
    let recordedChunks = [];
    let mediaRecorder;

    async function initMedia() {
        try {
            localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            localVideo.srcObject = localStream;
        } catch (err) {
            alert('Error accessing camera/mic: ' + err.message);
        }
    }

    function createRemoteVideo(socketId, userID) {
        if (peers[socketId]) return;
        const template = document.getElementById('otherTemplate');
        const clone = template.cloneNode(true);
        clone.style.display = 'flex';
        clone.id = 'remote_' + socketId;
        clone.querySelector('.user-name').textContent = userID;
        document.getElementById('divUsers').appendChild(clone);
        peers[socketId] = clone.querySelector('video');
        updateParticipants();
    }

    function removeRemoteVideo(socketId) {
        if (peers[socketId]) {
            peers[socketId].parentElement.remove();
            delete peers[socketId];
            updateParticipants();
        }
    }

    function updateParticipants() {
        const list = document.getElementById('participantsList');
        list.innerHTML = '';
        list.appendChild(createLi(userID));
        Object.keys(peers).forEach(id => list.appendChild(createLi(id)));
    }

    function createLi(name) {
        const li = document.createElement('li');
        li.className = 'list-group-item';
        li.textContent = name;
        return li;
    }

    async function loadDevice() {
        const rtpCapabilities = await new Promise(resolve => {
            socket.once("mediasoupRouterRtpCapabilities", data => resolve(data));
            socket.emit("joinMeeting", { meetingID, userID });
        });

        device = new mediasoupClient.Device();
        await device.load({ routerRtpCapabilities: rtpCapabilities });
    }

    async function createSendTransport() {
        const info = await new Promise(resolve =>
            socket.emit("createWebRtcTransport", {}, resolve)
        );
        sendTransport = device.createSendTransport(info);

        sendTransport.on("connect", ({ dtlsParameters }, callback, errback) => {
            socket.emit("connectTransport", { dtlsParameters }, callback);
        });

        sendTransport.on("produce", async ({ kind, rtpParameters }, callback, errback) => {
            socket.emit("produce", { kind, rtpParameters }, ({ id }) => callback({ id }));
        });

        // Produce local tracks
        for (const track of localStream.getTracks()) {
            sendTransport.produce({ track });
        }
    }

    socket.on("newProducer", async ({ producerId, kind }) => {
        const consumerInfo = await new Promise(resolve =>
            socket.emit("consume", { producerId, rtpCapabilities: device.rtpCapabilities }, resolve)
        );
        createRemoteVideo(producerId, producerId);
        const consumerTrack = new MediaStream();
        const videoEl = peers[producerId];
        const track = new mediasoupClient.Consumer(consumerInfo).track;
        consumerTrack.addTrack(track);
        videoEl.srcObject = consumerTrack;
    });

    socket.on('participantLeft', ({ socketID }) => removeRemoteVideo(socketID));

    initMedia().then(async () => {
        await loadDevice();
        await createSendTransport();
    });

    // Chat
    socket.on('receiveMessage', ({ userID: from, msg }) => {
        const div = document.createElement('div');
        div.textContent = `${from}: ${msg}`;
        document.getElementById('messages').appendChild(div);
        const messagesBox = document.getElementById('messages');
        messagesBox.scrollTop = messagesBox.scrollHeight;
    });

    $('#btnSendMsg').on('click', () => {
        const text = $('#msgbox').val();
        if (text.trim() !== '') {
            socket.emit('sendMessage', { meetingID, userID, msg: text });
            $('#msgbox').val('');

            // show own message instantly
            const div = document.createElement('div');
            div.textContent = `You: ${text}`;
            document.getElementById('messages').appendChild(div);
            document.getElementById('messages').scrollTop = document.getElementById('messages').scrollHeight;
        }
    });

    $('#msgbox').on('keypress', function (e) {
        if (e.which === 13 && !e.shiftKey) {
            e.preventDefault();
            $('#btnSendMsg').click();
        }
    });

    // Recording
    $("#start-recording").on('click', () => {
        recordedChunks = [];
        const combinedStream = new MediaStream();
        localStream.getTracks().forEach(t => combinedStream.addTrack(t));
        Object.values(peers).forEach(v => v.srcObject?.getTracks().forEach(t => combinedStream.addTrack(t)));
        mediaRecorder = new MediaRecorder(combinedStream);
        mediaRecorder.ondataavailable = e => { if (e.data.size > 0) recordedChunks.push(e.data); };
        mediaRecorder.start();
        $("#start-recording").prop("disabled", true);
        $("#download-video").prop("disabled", false);
    });

    $("#download-video").on('click', () => {
        if (mediaRecorder) mediaRecorder.stop();
        const blob = new Blob(recordedChunks, { type: 'video/webm' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'recording.webm';
        a.click();
        $("#start-recording").prop("disabled", false);
    });

});
</script>

<style>
.video-box {
    width: 100%;
    max-width: 250px;
    height: auto;
    background: black;
}

.userbox {
    margin: 5px;
    display: flex;
    flex-direction: column;
    align-items: center;
}

@media screen and (max-width: 768px) {
    .top-remote-video-show-wrap {
        flex-direction: column;
    }

    #meetingContainer {
        flex-basis: 100% !important;
    }

    .g-right-details-wrap {
        flex-basis: 100% !important;
        margin-top: 10px;
    }
}
</style>
</body>
</html>
