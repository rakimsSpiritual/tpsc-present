<!DOCTYPE html>
<html>

<head>
    <meta name="viewport" content="width=device-width" />
    <title>TeLis Video Classromm</title>

    <!-- Material + fonts (your originals) -->
    <link href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css" rel="stylesheet">
    <script src="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">

    <!-- Your assets -->
    <link rel="stylesheet" href="./../../bootstrap.min.css">
    <link rel="stylesheet" href="./../../style.css">

    <!-- Sockets + jQuery -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>
    <script src="./../../jquery-3.4.1.min.js"></script>

    <style>
        /* ensure videos are visible and consistent */
        video.video-box {
            width: 300px;
            height: 200px;
            background: #000;
            border-radius: 8px;
        }
    </style>

    <script>
        // === WrtcHelper & MyApp embedded (fixed) ===

        var WrtcHelper = (function () {
            // Keep your TURN/STUN list (replace creds if you have real ones)
            const iceConfiguration = {
                iceServers: [
                    { urls: "stun:stun.l.google.com:19302" },
                    { urls: "stun:stun1.l.google.com:19302" },
                    { urls: "stun:stun2.l.google.com:19302" },
                    // Keep TURNs if you have them; left here as example
                    // { urls: "turn:openrelay.metered.ca:80", username: "openrelayproject", credential: "openrelayproject" }
                ],
                iceTransportPolicy: "all"
            };

            var _audioTrack;
            var _audioStream;
            var _videoStream;

            var peers_conns = [];
            var peers_con_ids = [];
            var _remoteVideoStreams = [];
            var _remoteAudioStreams = [];
            var _localVideoPlayer;
            var _rtpVideoSenders = [];
            var _rtpAudioSenders = [];
            var _serverFn;

            var VideoStates = { None: 0, Camera: 1, ScreenShare: 2 };
            var _videoState = VideoStates.None;
            var _videoCamSSTrack;
            var _isAudioMute = false; // default to unmuted
            var _my_connid = "";

            async function _init(serFn, myconnid) {
                _my_connid = myconnid;
                _serverFn = serFn;
                _localVideoPlayer = document.getElementById("localVideoCtr");
                eventBinding();
                // Start audio immediately (user sees UI and can interact if autoplay blocks)
                await startwithAudio();
            }

            function eventBinding() {
                $("#btnMuteUnmute").on("click", async function () {
                    if (!_audioTrack) {
                        await startwithAudio();
                    }
                    if (!_audioTrack) {
                        alert("Please allow microphone access");
                        return;
                    }
                    _isAudioMute = !_isAudioMute;
                    _audioTrack.enabled = !_isAudioMute;

                    $(this).html(_isAudioMute
                        ? '<span class="material-icons">mic_off</span>'
                        : '<span class="material-icons">mic</span>');

                    if (!_isAudioMute) {
                        AddUpdateAudioVideoSenders(_audioTrack, _rtpAudioSenders, _audioStream);
                    } else {
                        RemoveAudioVideoSenders(_rtpAudioSenders);
                    }
                });

                $("#btnStartStopCam").on("click", async function () {
                    await ManageVideo(_videoState == VideoStates.Camera ? VideoStates.None : VideoStates.Camera);
                });

                $("#btnStartStopScreenshare").on("click", async function () {
                    await ManageVideo(_videoState == VideoStates.ScreenShare ? VideoStates.None : VideoStates.ScreenShare);
                });

                // A global "Enable Audio" click to recover from autoplay policy if needed
                $(document).on('click', '.enable-audio-once', function () {
                    $('audio[id^="a_"]').each(function () {
                        const el = this;
                        if (el.srcObject) {
                            const p = el.play();
                            if (p && typeof p.then === 'function') p.catch(() => { /* ignore */ });
                        }
                    });
                    $(this).remove();
                });
            }

            async function ManageVideo(newVideoState) {
                // Stop current video if changing state
                if (_videoState !== VideoStates.None && _videoState !== newVideoState) {
                    await ClearCurrentVideoCamStream(_rtpVideoSenders);
                }

                if (newVideoState == VideoStates.None) {
                    $("#btnStartStopCam").html('<span class="material-icons">videocam_off</span>');
                    $("#btnStartStopScreenshare").html(
                        '<div class="present-now-wrap d-flex justify-content-center flex-column align-items-center mr-5 cursor-pointer" id="btnStartStopScreenshare" style="height:10vh;">' +
                        '<div class="present-now-icon"><span class="material-icons">present_to_all</span></div>' +
                        '<div>Present Now</div></div>'
                    );
                    _videoState = newVideoState;
                    return;
                }

                try {
                    let vstream = null;

                    if (newVideoState == VideoStates.Camera) {
                        vstream = await navigator.mediaDevices.getUserMedia({
                            video: {
                                width: { ideal: 1280 },
                                height: { ideal: 720 },
                                frameRate: { ideal: 30 }
                            },
                            audio: false
                        });
                        _videoStream = vstream; // keep owning stream
                    } else if (newVideoState == VideoStates.ScreenShare) {
                        vstream = await navigator.mediaDevices.getDisplayMedia({
                            video: {
                                width: { ideal: 1280 },
                                height: { ideal: 720 },
                                frameRate: { ideal: 30 }
                            },
                            audio: false
                        });
                        _videoStream = vstream;
                        vstream.getVideoTracks()[0].onended = () => {
                            ManageVideo(VideoStates.None);
                        };
                    }

                    _videoState = newVideoState;
                    _videoCamSSTrack = vstream.getVideoTracks()[0];

                    // Update UI
                    if (newVideoState == VideoStates.Camera) {
                        $("#btnStartStopCam").html('<span class="material-icons">videocam</span>');
                    } else if (newVideoState == VideoStates.ScreenShare) {
                        $("#btnStartStopScreenshare").html(
                            '<div class="present-now-wrap d-flex justify-content-center flex-column align-items-center mr-5 cursor-pointer" id="btnStartStopScreenshare" style="height:10vh;">' +
                            '<div class="present-now-icon"><span class="material-icons">present_to_all</span></div>' +
                            '<div>Stop Present Now</div></div>'
                        );
                    }

                    // Display local video
                    _localVideoPlayer.srcObject = new MediaStream([_videoCamSSTrack]);
                    AddUpdateAudioVideoSenders(_videoCamSSTrack, _rtpVideoSenders, _videoStream);

                } catch (error) {
                    console.error("Error accessing media devices:", error);
                    _videoState = VideoStates.None;
                }
            }

            async function ClearCurrentVideoCamStream(rtpVideoSenders) {
                if (_videoCamSSTrack) {
                    _videoCamSSTrack.stop();
                    _videoCamSSTrack = null;
                    _localVideoPlayer.srcObject = null;
                    RemoveAudioVideoSenders(rtpVideoSenders);
                }
            }

            async function RemoveAudioVideoSenders(rtpSenders) {
                for (var con_id in peers_con_ids) {
                    if (rtpSenders[con_id] && IsConnectionAvailable(peers_conns[con_id])) {
                        try {
                            peers_conns[con_id].removeTrack(rtpSenders[con_id]);
                        } catch (e) { /* ignore */ }
                        rtpSenders[con_id] = null;
                    }
                }
            }

            // *** IMPORTANT FIX: addTrack(track, stream) so event.streams is populated ***
            async function AddUpdateAudioVideoSenders(track, rtpSenders, owningStream) {
                for (var con_id in peers_con_ids) {
                    const pc = peers_conns[con_id];
                    if (IsConnectionAvailable(pc)) {
                        try {
                            if (rtpSenders[con_id]) {
                                await rtpSenders[con_id].replaceTrack(track);
                            } else {
                                // pass the stream to bind MSID
                                rtpSenders[con_id] = pc.addTrack(track, owningStream || new MediaStream([track]));
                            }
                        } catch (error) {
                            console.error("Error updating track:", error);
                        }
                    }
                }
            }

            async function startwithAudio() {
                try {
                    const astream = await navigator.mediaDevices.getUserMedia({
                        audio: { echoCancellation: true, noiseSuppression: true, autoGainControl: true },
                        video: false
                    });
                    _audioStream = astream;
                    _audioTrack = astream.getAudioTracks()[0];
                    _audioTrack.enabled = !_isAudioMute;
                } catch (error) {
                    console.error("Error accessing microphone:", error);
                }
            }

            async function createConnection(connid) {
                var connection = new RTCPeerConnection(iceConfiguration);

                connection.onicecandidate = (event) => {
                    if (event.candidate) {
                        _serverFn(JSON.stringify({ iceCandidate: event.candidate }), connid);
                    } else {
                        console.log("ICE gathering complete");
                    }
                };

                connection.onicecandidateerror = (event) => {
                    console.error("ICE candidate error:", event);
                };

                connection.oniceconnectionstatechange = () => {
                    console.log("ICE connection state:", connection.iceConnectionState);
                    if (connection.iceConnectionState === "failed") {
                        console.log("ICE restarting...");
                        try { connection.restartIce(); } catch (e) { /* ignore */ }
                    }
                };

                connection.onconnectionstatechange = () => {
                    console.log("Connection state:", connection.connectionState);
                };

                connection.ontrack = (event) => {
                    // we no longer bail if streams missing, but we attempt to build them
                    const track = event.track;
                    const stream = event.streams && event.streams[0] ? event.streams[0] : new MediaStream([track]);

                    if (track.kind === "video") {
                        if (!_remoteVideoStreams[connid]) _remoteVideoStreams[connid] = new MediaStream();
                        _remoteVideoStreams[connid].addTrack(track);

                        const remoteVideoPlayer = document.getElementById("v_" + connid);
                        if (remoteVideoPlayer) {
                            remoteVideoPlayer.playsInline = true;
                            remoteVideoPlayer.autoplay = true;
                            remoteVideoPlayer.srcObject = _remoteVideoStreams[connid];
                            const p = remoteVideoPlayer.play();
                            if (p && typeof p.then === 'function') p.catch(() => { /* ignore autoplay errors */ });
                        }
                    } else if (track.kind === "audio") {
                        if (!_remoteAudioStreams[connid]) _remoteAudioStreams[connid] = new MediaStream();
                        _remoteAudioStreams[connid].addTrack(track);

                        const remoteAudioPlayer = document.getElementById("a_" + connid);
                        if (remoteAudioPlayer) {
                            remoteAudioPlayer.autoplay = true;
                            remoteAudioPlayer.muted = false;
                            remoteAudioPlayer.srcObject = _remoteAudioStreams[connid];
                            const p = remoteAudioPlayer.play();
                            if (p && typeof p.then === 'function') {
                                p.catch(() => {
                                    // show one-time enable button if browser blocks audio
                                    if (!$('.enable-audio-once').length) {
                                        $('body').append('<button class="enable-audio-once" style="position:fixed;bottom:10px;left:10px;z-index:9999">Enable Audio</button>');
                                    }
                                });
                            }
                        }
                    }
                };

                peers_con_ids[connid] = connid;
                peers_conns[connid] = connection;

                // Add existing tracks to new connection
                if (_videoCamSSTrack && _videoStream) {
                    AddUpdateAudioVideoSenders(_videoCamSSTrack, _rtpVideoSenders, _videoStream);
                }
                if (_audioTrack && !_isAudioMute && _audioStream) {
                    AddUpdateAudioVideoSenders(_audioTrack, _rtpAudioSenders, _audioStream);
                }

                return connection;
            }

            async function _createOffer(connid) {
                const connection = peers_conns[connid];
                try {
                    const offer = await connection.createOffer({
                        offerToReceiveAudio: true,
                        offerToReceiveVideo: true
                    });
                    await connection.setLocalDescription(offer);

                    _serverFn(JSON.stringify({ offer: connection.localDescription }), connid);
                } catch (error) {
                    console.error("Error creating offer:", error);
                }
            }

            async function exchangeSDP(message, from_connid) {
                try {
                    message = JSON.parse(message);

                    if (message.answer) {
                        await peers_conns[from_connid].setRemoteDescription(new RTCSessionDescription(message.answer));
                    } else if (message.offer) {
                        if (!peers_conns[from_connid]) {
                            await createConnection(from_connid);
                        }
                        await peers_conns[from_connid].setRemoteDescription(new RTCSessionDescription(message.offer));

                        const answer = await peers_conns[from_connid].createAnswer();
                        await peers_conns[from_connid].setLocalDescription(answer);

                        _serverFn(JSON.stringify({ answer: answer }), from_connid, _my_connid);
                    } else if (message.iceCandidate) {
                        if (!peers_conns[from_connid]) {
                            await createConnection(from_connid);
                        }
                        await peers_conns[from_connid].addIceCandidate(message.iceCandidate);
                    }
                } catch (error) {
                    console.error("Error in SDP exchange:", error);
                }
            }

            function IsConnectionAvailable(connection) {
                return connection && ["new", "connecting", "connected"].includes(connection.connectionState);
            }

            function closeConnection(connid) {
                if (peers_conns[connid]) {
                    try { peers_conns[connid].close(); } catch (e) { /* ignore */ }
                    peers_conns[connid] = null;
                }
                if (_remoteAudioStreams[connid]) {
                    _remoteAudioStreams[connid].getTracks().forEach(t => t.stop());
                    _remoteAudioStreams[connid] = null;
                }
                if (_remoteVideoStreams[connid]) {
                    _remoteVideoStreams[connid].getTracks().forEach(t => t.stop());
                    _remoteVideoStreams[connid] = null;
                }
                peers_con_ids[connid] = null;
                $("#v_" + connid).closest(".userbox").remove();
                $("#participant_" + connid).remove();
            }

            return {
                init: async function (serverFn, my_connid) {
                    await _init(serverFn, my_connid);
                },
                ExecuteClientFn: async function (data, from_connid) {
                    await exchangeSDP(data, from_connid);
                },
                createNewConnection: async function (connid) {
                    const pc = await createConnection(connid);
                    await _createOffer(connid);
                    return pc;
                },
                closeExistingConnection: function (connid) {
                    closeConnection(connid);
                },
                ManageVideo // expose for UI buttons if needed
            };
        })();

        var MyApp = (function () {
            var socket = null;
            var socket_url = window.location.origin; // secure on Render
            var meeting_id = "";
            var user_id = "";

            function init(uid, mid) {
                user_id = uid;
                meeting_id = mid;

                document.title = `${user_id} - ${meeting_id}`;
                $("#me h2").text(`${user_id} (Me)`);

                SignalServerEventBinding();
                EventBinding();

                $(document).on("click", ".share-button-wrap", function () {
                    const fileInput = document.getElementById("customFile");
                    if (!fileInput || fileInput.files.length === 0) return;

                    const file = fileInput.files[0];
                    const fileName = file.name;
                    const filePath = `/attachment/${meeting_id}/${fileName}`;

                    const attachFileArea = document.querySelector(".show-attach-file");
                    if (attachFileArea) {
                        attachFileArea.innerHTML += `
                          <div class="left-align" style="display:flex;align-items:center;">
                            <img src="assets/images/other.jpg" style="height:40px;width:40px;" class="caller-image circle">
                            <div style="font-weight:600;margin:0 5px;">${user_id}</div>:
                            <div><a style="color:#007bff;" href="${filePath}" download>${fileName}</a></div>
                          </div><br/>`;
                    }

                    socket.emit("fileTransferToOther", {
                        username: user_id,
                        meetingid: meeting_id,
                        FileePath: filePath,
                        fileeName: fileName,
                    });

                    fileInput.value = "";
                });
            }

            function SignalServerEventBinding() {
                socket = io.connect(socket_url, {
                    reconnection: true,
                    reconnectionAttempts: 5,
                    reconnectionDelay: 1000,
                    transports: ["websocket"] // enforce wss on Render
                });

                const serverFn = (data, to_connid) => {
                    socket.emit("exchangeSDP", { message: data, to_connid: to_connid });
                };

                socket.on("connect", () => {
                    if (socket.connected) {
                        WrtcHelper.init(serverFn, socket.id);

                        if (user_id && meeting_id) {
                            socket.emit("userconnect", {
                                dsiplayName: user_id,
                                meetingid: meeting_id
                            });
                        }
                    }
                });

                socket.on("disconnect", () => {
                    console.log("Disconnected from signaling server");
                });

                socket.on("exchangeSDP", async (data) => {
                    await WrtcHelper.ExecuteClientFn(data.message, data.from_connid);
                });

                socket.on("informAboutNewConnection", (data) => {
                    AddNewUser(data.other_user_id, data.connId, data.userNumber);
                    WrtcHelper.createNewConnection(data.connId);
                });

                socket.on("informAboutConnectionEnd", (data) => {
                    $(`#${data.connId}`).remove();
                    $(`#participant_${data.connId}`).remove();
                    $(".participant-count").text(data.userCoun);
                    WrtcHelper.closeExistingConnection(data.connId);
                });

                socket.on("showChatMessage", (data) => {
                    const time = new Date().toLocaleString("en-US", {
                        hour: "numeric",
                        minute: "numeric",
                        hour12: true
                    });

                    $("#messages").append(`
                      <div>
                        <span class="font-weight-bold mr-3" style="color:black">${data.from}</span>${time}<br/>
                        ${data.message}
                      </div>
                    `);
                });

                socket.on("showFileMessage", (data) => {
                    const attachFileArea = document.querySelector(".show-attach-file");
                    if (!attachFileArea) return;
                    attachFileArea.innerHTML += `
                      <div class="left-align" style="display:flex;align-items:center;">
                        <img src="assets/images/other.jpg" style="height:40px;width:40px;" class="caller-image circle">
                        <div style="font-weight:600;margin:0 5px;">${data.username}</div>:
                        <div><a style="color:#007bff;" href="${data.FileePath}" download>${data.fileeName}</a></div>
                      </div><br/>
                    `;
                });

                socket.on("userconnected", (other_users) => {
                    $("#divUsers .other").remove();

                    const userCount = (other_users?.length || 0) + 1;
                    other_users.forEach(user => {
                        AddNewUser(user.user_id, user.connectionId, userCount);
                        WrtcHelper.createNewConnection(user.connectionId);
                    });

                    $(".toolbox, #messages, #divUsers").show();
                });
            }

            function EventBinding() {
                $("#btnResetMeeting").on("click", () => socket.emit("reset"));

                $("#btnsend").on("click", () => {
                    const message = $("#msgbox").val().trim();
                    if (message) {
                        socket.emit("sendMessage", message);
                        $("#msgbox").val("");
                    }
                });

                $("#divUsers").on("dblclick", "video", function () {
                    if (this.requestFullscreen) this.requestFullscreen();
                });
            }

            function AddNewUser(other_user_id, connId, userNum) {
                const $newDiv = $("#otherTemplate").clone()
                    .attr("id", connId)
                    .addClass("other")
                    .show();

                $newDiv.find("h2").text(other_user_id);

                // Ensure the video uses your requested class and attributes
                const $video = $newDiv.find("video");
                $video.attr("id", `v_${connId}`);
                $video.attr("playsinline", true).addClass("video-box"); // integrate class
                $video.prop("muted", false); // remote video not muted

                // Create separate audio sink (unmuted) for reliability across browsers
                let $audio = $newDiv.find("audio");
                if ($audio.length === 0) {
                    $audio = $('<audio autoplay></audio>');
                    $newDiv.find(".display-center").append($audio);
                }
                $audio.attr("id", `a_${connId}`).prop("muted", false).attr("controls", true).hide();

                $("#divUsers").append($newDiv);

                $(".in-call-wrap-up").append(`
                  <div class="in-call-wrap d-flex justify-content-between align-items-center mb-3" id="participant_${connId}">
                    <div class="participant-img-name-wrap display-center cursor-pointer">
                      <div class="participant-img">
                        <img src="images/me2.png" alt="" class="border border-secondary" style="height:40px;width:40px;border-radius:50%;">
                      </div>
                      <div class="participant-name ml-2">${other_user_id}</div>
                    </div>
                    <div class="participant-action-wrap display-center">
                      <div class="participant-action-dot display-center mr-2 cursor-pointer">
                        <span class="material-icons">more_vert</span>
                      </div>
                      <div class="participant-action-pin display-center cursor-pointer">
                        <span class="material-icons">push_pin</span>
                      </div>
                    </div>
                  </div>
                `);

                $(".participant-count").text(userNum);
            }

            return {
                _init: function (uid, mid) {
                    init(uid, mid);
                },
            };
        })();
    </script>

    <script>
        // === Your existing page bootstrap (unchanged except the call to MyApp) ===
        $(function () {
            const urlParams = new URLSearchParams(window.location.search);
            var meeting_id = urlParams.get('meetingID');

            var user_id = urlParams.get('uid');
            if (!user_id) {
                user_id = window.prompt('Enter your nick name!');
            }

            if (!user_id || !meeting_id) {
                window.location.href = '/sign';
                return;
            }
            $("#meetingContainer").show();
            $("#meetingbox").hide();
            $(".username_holder").val(user_id);
            MyApp._init(user_id, meeting_id);
        });
    </script>
</head>

<body>
    <div id="meetingbox" style="display: none;">
        <p>It seems you are not trying to join any meeting!
            You may start a new meeting. Here is generated for you. <a id='meetingid' href="#"></a>
        </p>
    </div>

    <main class="container-fluid d-flex flex-column home-wrap">
        <div class="g-top text-light">
            <div class="top-remote-video-show-wrap d-flex">
                <div id="meetingContainer" style="display: none;flex-basis: 75%;">
                    <h1 id='meetingname'></h1>
                    <div class="call-wrap " style="background-color: black;">
                        <div id='divUsers' class="video-wrap" style="display:none;display: flex;flex-wrap: wrap;">
                            <div id="me" class="userbox div-center-column">
                                <h2 class="display-center" style="font-size: 14px;"></h2>
                                <div class="display-center">
                                    <!-- local video -->
                                    <video autoplay muted playsinline id="localVideoCtr" class="video-box"></video>
                                </div>
                            </div>

                            <!-- Remote template (will be cloned and IDs replaced) -->
                            <div id="otherTemplate" class="userbox div-center-column" style="display:none">
                                <h2 class="display-center" style="font-size: 14px;"></h2>
                                <div class="display-center">
                                    <!-- your requested markup -->
                                    <video autoplay playsinline class="video-box"></video>
                                    <audio autoplay controls style="display:none"></audio>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right drawer (kept as in your original) -->
                <div class="g-right-details-wrap bg-light text-secondary h-100" style="flex-basis: 25%;z-index: 1;display: none;">
                    <div class="meeting-heading-wrap d-flex justify-content-between align-items-center pr-3 pl-3" style="height: 10vh;">
                        <div class="meeting-heading font-weight-bold cursor-pointer"> Meeting Details</div>
                        <div class="meeting-heading-cross display-center cursor-pointer">
                            <span class="material-icons">clear</span>
                        </div>
                    </div>
                    <div class="people-chat-wrap d-flex justify-content-between align-items-center border-bottom ml-3 mr-3 pl-3 pr-3" style="height: 10vh;font-size: 14px;">
                        <div class="people-heading display-center cursor-pointer">
                            <div class="people-heading-icon display-center mr-1">
                                <span class="material-icons">people</span>
                            </div>
                            <div class="people-heading-text display-center ">Participant (<span class="participant-count">1</span>)</div>
                        </div>
                        <div class="chat-heading d-flex justify-content-around align-items-center cursor-pointer">
                            <div class="chat-heading-icon display-center mr-1"><span class="material-icons">message</span></div>
                            <div class="chat-heading-text">Chat</div>
                        </div>
                    </div>
                    <div class="in-call-chat-wrap mr-3 ml-3 mt-4" style="font-size: 14px;">
                        <div class="in-call-wrap-up" style="display: none !important;">
                            <div class="in-call-wrap d-flex justify-content-between align-items-center mb-3">
                                <div class="participant-img-name-wrap display-center cursor-pointer">
                                    <div class="participant-img">
                                        <img src="images/other.jpg" alt="" class="border border-secondary" style="height: 40px;width: 40px;border-radius: 50%;">
                                    </div>
                                    <div class="participant-name ml-2">You</div>
                                </div>
                                <div class="participant-action-wrap display-center">
                                    <div class="participant-action-dot display-center mr-2 cursor-pointer">
                                        <span class="material-icons">more_vert</span>
                                    </div>
                                    <div class="participant-action-pin display-center cursor-pointer">
                                        <span class="material-icons">push_pin</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="chat-show-wrap text-secondary" style="font-size:14px;">
                            <div class="chat-message-show" id="messages"></div>
                            <div class="chat-message-sent d-flex justify-content-between align-items-center" style="margin-bottom: 35px;">
                                <div class="chat-message-sent-input" style="width: 85%;">
                                    <input type="text" class="chat-message-sent-input-field w-100" id="msgbox" placeholder="Send a message to everyone" style="border: navajowhite;border-bottom: 1px solid teal;">
                                </div>
                                <div class="chat-message-sent-action display-center" id="btnsend" style="color: teal;cursor: pointer;">
                                    <span class="material-icons">send</span>
                                </div>
                            </div>
                        </div>
                        <div class="show-attach-file"></div>
                    </div>
                </div>
            </div>

            <div class="g-top-left bg-light text-secondary w-25 d-flex align-items-center justify-content-between pl-2 pr-2">
                <div class="top-left-participant-wrap pt-2 cursor-pointer">
                    <div class="top-left-participant-icon"><span class="material-icons">people</span></div>
                    <div class="top-left-participant-count"></div>
                </div>
                <div class="top-left-chat-wrap pt-2 cursor-pointer">
                    <span class="material-icons">message</span>
                </div>
                <div class="top-left-time-wrap"></div>
                <div class="top-left-you-wrap text-light d-none">You</div>
            </div>
        </div>

        <div class="g-bottom bg-light m-0 d-flex justify-content-between align-items-center">
            <!-- Left Section - Meeting Details -->
            <div class="bottom-left d-flex align-items-center" style="height:10vh;">
                <div class="display-center cursor-pointer meeting-details-button">
                    <span class="material-icons mr-1">info</span>
                    Meeting Details
                </div>
            </div>

            <!-- Center Section - Main Controls -->
            <div class="d-flex justify-content-center align-items-center" style="height:10vh;">
                <!-- Mic Control -->
                <div class="action-icon-style display-center mx-2 cursor-pointer" id="btnMuteUnmute" title="Mute/Unmute">
                    <span class="material-icons">mic</span>
                </div>

                <!-- End Call -->
                <div class="action-icon-style display-center mx-2 cursor-pointer end-call-wrap">
                    <span class="material-icons text-danger">call</span>
                </div>

                <!-- Video Control -->
                <div class="action-icon-style display-center mx-2 cursor-pointer" id="btnStartStopCam">
                    <span class="material-icons">videocam_off</span>
                </div>

                <!-- Recording Controls -->
                <div class="display-center mx-2">
                    <button class="btn btn-danger btn-sm" id="start-recording">Start Recording</button>
                    <button id="download-video" class="btn btn-success btn-sm ml-1" disabled>Download Video</button>
                </div>

                <!-- Present Now -->
                <div class="display-center mx-2 cursor-pointer" id="btnStartStopScreenshare">
                    <button class="btn btn-primary btn-sm">
                        <span class="material-icons align-middle">present_to_all</span>
                        <span class="align-middle">Present Now</span>
                    </button>
                </div>
            </div>

            <!-- Right Section - Options -->
            <div class="bottom-right d-flex justify-content-center align-items-center mr-3" style="height:10vh;">
                <div class="option-wrap cursor-pointer display-center" style="position:relative;">
                    <div class="option-icon">
                        <span class="material-icons">more_vert</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Meeting Details Panel -->
        <div class="g-detail" style="display: none; position: fixed; bottom: 80px; left: 20px; background: white; padding: 15px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.2); z-index: 1000; width: 300px;">
            <div class="g-details-heading d-flex border-bottom">
                <div class="g-details-heading-detail cursor-pointer p-2">Details</div>
                <div class="g-details-heading-attachment cursor-pointer p-2">Attachments</div>
            </div>
            <div class="g-details-heading-show p-2">
                <div class="meeting-info">
                    <h4>Meeting Information</h4>
                    <p>Meeting URL: <span class="meeting_url"></span></p>
                    <button class="copy_info btn btn-sm btn-primary">Copy</button>
                    <span class="link-conf" style="display:none;">Copied!</span>
                </div>
            </div>
            <div class="g-details-heading-show-attachment p-2" style="display:none;">
                <h4>Attachments</h4>
                <div class="attachments-list"></div>
            </div>
        </div>

        <!-- Leave Meeting Confirmation -->
        <div class="top-box-show" style="display: none;"></div>
        <input type="hidden" class="username_holder">
    </main>

    <!-- Recording & UI JS (kept from your original, lightly cleaned) -->
    <script>
        let mediaRecorder;
        let recordedBlobs;
        var recordButton = document.querySelector('#start-recording');
        var downloadButton = document.querySelector('#download-video');

        recordButton.addEventListener('click', () => {
            if (recordButton.textContent === 'Start Recording') {
                startRecording();
                recordButton.textContent = 'Stop Recording';
                downloadButton.disabled = true;
            } else {
                stopRecording();
                recordButton.textContent = 'Start Recording';
                downloadButton.disabled = false;
            }
        });

        downloadButton.addEventListener('click', () => {
            const blob = new Blob(recordedBlobs, { type: 'video/webm' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = 'recording.webm';
            document.body.appendChild(a);
            a.click();
            setTimeout(() => {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 100);
        });

        function handleDataAvailable(event) {
            if (event.data && event.data.size > 0) recordedBlobs.push(event.data);
        }

        function startRecording() {
            navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {
                recordedBlobs = [];
                let options = { mimeType: 'video/webm;codecs=vp9,opus' };
                if (!MediaRecorder.isTypeSupported(options.mimeType)) {
                    options = { mimeType: 'video/webm;codecs=vp8,opus' };
                    if (!MediaRecorder.isTypeSupported(options.mimeType)) {
                        options = { mimeType: 'video/webm' };
                    }
                }
                try {
                    mediaRecorder = new MediaRecorder(stream, options);
                } catch (e) {
                    console.error('Exception while creating MediaRecorder:', e);
                    return;
                }
                mediaRecorder.onstop = () => {};
                mediaRecorder.ondataavailable = handleDataAvailable;
                mediaRecorder.start();
            });
        }

        function stopRecording() {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') mediaRecorder.stop();
        }

        $(function () {
            $(document).on("click", ".option-icon", function () {
                $(".recording-wrap").slideToggle(200)
            });

            const urlParams = new URLSearchParams(window.location.search);
            var meeting_id = urlParams.get('meetingID');
            var base_url = window.location.origin;

            $(document).on("click", ".share-attach", function (e) {
                e.preventDefault();
                var att_img = $("#customFile").prop('files')[0];
                var formData = new FormData();
                formData.append("zipfile", att_img);
                formData.append("meeting_id", meeting_id);
                formData.append("username", $('.username_holder').val());

                $.ajax({
                    url: base_url + "/attachimg",
                    type: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false
                });
            });

            $(".custom-file-input").on("change", function () {
                var fileName = $(this).val().split("\\").pop();
                $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
            });

            var time = new Date();
            var timeDiv = document.getElementsByClassName("top-left-time-wrap");
            if (timeDiv[0]) timeDiv[0].innerHTML = time.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })

            $(document).on('click', '.top-left-participant-wrap', function () {
                $(".g-right-details-wrap").show(300);
                $(".in-call-wrap-up").show(300);
                $(".chat-show-wrap").hide(300);
            });

            $(document).on('click', '.top-left-chat-wrap', function () {
                $(".g-right-details-wrap").show(300);
                $(".in-call-wrap-up").hide(300);
                $(".chat-show-wrap").show(300);
            });

            $(document).on('click', '.meeting-heading-cross', function () {
                $(".g-right-details-wrap").hide(300);
            });

            $(document).on('click', '.chat-heading', function () {
                $(".in-call-wrap-up").hide(300);
                $(".chat-show-wrap").show(300);
            });

            $(document).on('click', '.people-heading', function () {
                $(".in-call-wrap-up").show(300);
                $(".chat-show-wrap").hide(300);
            });

            $(document).on('click', '.meeting-details-button', function () {
                $(".g-detail").toggle(300);
            });

            $(document).on("click", ".g-details-heading-detail", function () {
                $(".g-details-heading-show").show();
                $(".g-details-heading-show-attachment").hide();
            });

            $(document).on("click", ".g-details-heading-attachment", function () {
                $(".g-details-heading-show").hide();
                $(".g-details-heading-show-attachment").show();
            });

            $(document).on("click", ".copy_info", function () {
                var $temp = $("<input>");
                $("body").append($temp);
                $temp.val($(".meeting_url").text()).select();
                document.execCommand("copy");
                $temp.remove();
                $('.link-conf').show();
                setTimeout(function () { $('.link-conf').hide(); }, 3000);
            });

            var url = window.location.href;
            $(".meeting_url").text(url);

            setTimeout(function () {
                var videoWidth = $("video").width();
                $("video").css({ "width": videoWidth + "px" });
            }, 1000);

            $(document).on('click', '.end-call-wrap', function () {
                $('.top-box-show').css({ "display": "block" }).html(
                    '<div class="top-box align-vertical-middle profile-dialoge-show "> ' +
                    '<h1 class="mt-2">Leave Meeting</h1> <hr> ' +
                    '<div class="call-leave-cancel-action d-flex justify-content-center align-items-center w-100"> ' +
                    '<a href="/sign"><button class="call-leave-action btn btn-danger mr-5">Leave</button></a> ' +
                    '<button class="call-cancel-action btn btn-secondary">Cancel</button> </div> </div>');
            });

            $(document).mouseup(function (e) {
                var container = new Array();
                container.push($('.top-box-show'));
                $.each(container, function (key, value) {
                    if (!$(value).is(e.target) && $(value).has(e.target).length === 0) {
                        $(value).empty();
                    }
                })
            });

            $(document).on('click', '.call-cancel-action', function () {
                $('.top-box-show').html('');
            })
        });
    </script>
</body>
</html>
