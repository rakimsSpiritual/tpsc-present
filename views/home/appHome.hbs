<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>TeLis Video Classroom</title>
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link rel="stylesheet" href="/bootstrap.min.css">
<link rel="stylesheet" href="/style.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<style>
body { margin:0; font-family: Arial, sans-serif; background:#f4f4f4; }
.video-box { width: 100%; max-width: 300px; height: 200px; background: black; margin-bottom:10px; }
.userbox { position: relative; margin:5px; }
#divUsers { display:flex; flex-wrap: wrap; justify-content:flex-start; }
#participantsList { max-height: 200px; overflow-y: auto; }
#messages { height:200px; overflow-y:auto; border:1px solid #ccc; padding:5px; background:#fff; }
@media (max-width: 768px) {
  #meetingContainer { flex-direction: column; }
  #divUsers { justify-content:center; }
}
</style>
</head>
<body>
<main class="container-fluid">
  <h1 class="text-center my-2">TeLis Video Classroom</h1>
  <div class="row">
    <!-- Video Section -->
    <div class="col-md-8" id="meetingContainer" style="display:none;">
      <div id="divUsers">
        <!-- Local Video -->
        <div id="me" class="userbox">
          <h5 class="user-name">Me</h5>
          <video id="localVideoCtr" autoplay muted playsinline class="video-box"></video>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="col-md-4 bg-light p-2">
      <h5>Participants</h5>
      <ul id="participantsList" class="list-group mb-2"></ul>
      <h5>Chat</h5>
      <div id="messages"></div>
      <div class="input-group mt-2">
        <input type="text" id="msgbox" class="form-control" placeholder="Type a message">
        <button id="btnSendMsg" class="btn btn-primary">Send</button>
      </div>
    </div>
  </div>

  <div class="mt-3">
    <button id="start-recording" class="btn btn-danger">Start Recording</button>
    <button id="download-video" class="btn btn-success" disabled>Download Recording</button>
  </div>
</main>

<script>
const socket = io();
let localStream;
let peers = {}; // { userID: RTCPeerConnection }
let recordedBlobs;
let mediaRecorder;

$(function(){
  const urlParams = new URLSearchParams(window.location.search);
  const meetingID = urlParams.get('meetingID');
  let userID = urlParams.get('uid');
  if(!userID) userID = prompt("Enter your nickname");

  if(!meetingID || !userID){
    alert("Meeting ID or User ID missing");
    window.location.href = "/sign";
    return;
  }

  $("#meetingContainer").show();

  // Get media
  navigator.mediaDevices.getUserMedia({video:true,audio:true})
    .then(stream => {
      localStream = stream;
      $("#localVideoCtr")[0].srcObject = stream;
      socket.emit("joinMeeting", { meetingID, userID });
    })
    .catch(err => alert("Error accessing camera/mic: "+err));

  // Handle new participant
  socket.on("newParticipant", ({ participants, userID: newUserID }) => {
    updateParticipantsList(participants);
    if(newUserID !== userID) initPeer(newUserID, true);
  });

  // Participant left
  socket.on("participantLeft", ({ participants }) => updateParticipantsList(participants));

  // Messaging
  socket.on("receiveMessage", ({ userID: sender, msg }) => {
    $("#messages").append(`<div><b>${sender}:</b> ${msg}</div>`);
    $("#messages").scrollTop($("#messages")[0].scrollHeight);
  });

  $("#btnSendMsg").click(()=>{
    const msg = $("#msgbox").val();
    if(msg.trim()==="") return;
    socket.emit("sendMessage",{ meetingID, userID, msg });
    $("#msgbox").val("");
  });

  // Signaling
  socket.on("signal", async ({ userID: remoteID, sdp, candidate }) => {
    if(!peers[remoteID]) initPeer(remoteID,false);
    const pc = peers[remoteID];
    if(sdp){
      await pc.setRemoteDescription(new RTCSessionDescription(sdp));
      if(sdp.type==="offer"){
        const answer = await pc.createAnswer();
        await pc.setLocalDescription(answer);
        socket.emit("signal",{ to: remoteID, sdp: pc.localDescription });
      }
    }
    if(candidate) pc.addIceCandidate(new RTCIceCandidate(candidate));
  });

  // Start recording
  $("#start-recording").click(()=>{ startRecording(); });
  $("#download-video").click(()=>{ downloadRecording(); });
});

// Utility functions
function updateParticipantsList(list){
  $("#participantsList").empty();
  list.forEach(u=>{
    $("#participantsList").append(`<li class="list-group-item">${u}</li>`);
  });
}

function initPeer(remoteID, isInitiator){
  const pc = new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]});
  localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

  pc.onicecandidate = e => { if(e.candidate) socket.emit("signal",{ to:remoteID, candidate:e.candidate }); };
  pc.ontrack = e => {
    let vid = $("#"+remoteID);
    if(!vid.length){
      $("#divUsers").append(`<div id="${remoteID}" class="userbox"><h5 class="user-name">${remoteID}</h5><video autoplay playsinline class="video-box"></video></div>`);
      vid = $("#"+remoteID+" video");
    }else vid = vid.find("video");
    vid[0].srcObject = e.streams[0];
  };

  peers[remoteID] = pc;
  if(isInitiator){
    pc.createOffer().then(offer => pc.setLocalDescription(offer).then(()=>{
      socket.emit("signal",{ to:remoteID, sdp: pc.localDescription });
    }));
  }
}

function startRecording(){
  recordedBlobs = [];
  mediaRecorder = new MediaRecorder(localStream,{mimeType:'video/webm;codecs=vp9,opus'});
  mediaRecorder.ondataavailable = e=>{ if(e.data && e.data.size>0) recordedBlobs.push(e.data); };
  mediaRecorder.start();
  $("#start-recording").prop("disabled",true);
  $("#download-video").prop("disabled",true);
}

function downloadRecording(){
  mediaRecorder.stop();
  const blob = new Blob(recordedBlobs,{type:'video/webm'});
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.style.display="none";
  a.href=url;
  a.download="recording.webm";
  document.body.appendChild(a);
  a.click();
  setTimeout(()=>{ document.body.removeChild(a); window.URL.revokeObjectURL(url); },100);
  $("#start-recording").prop("disabled",false);
  $("#download-video").prop("disabled",true);
}
</script>
</body>
</html>
