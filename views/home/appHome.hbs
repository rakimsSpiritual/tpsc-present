<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>TeLis Video Classroom</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- CSS Libraries -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="/bootstrap.min.css">
    <link rel="stylesheet" href="/style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        /* Responsive Video and Layout */
        .video-box {
            width: 100%;
            max-width: 300px;
            height: 180px;
            background: black;
        }

        .userbox {
            margin: 5px;
            flex: 1 1 250px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        #divUsers {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }

        #participantsList {
            max-height: 200px;
            overflow-y: auto;
        }

        #messages {
            height: 200px;
            overflow-y: auto;
            border: 1px solid #ccc;
            padding: 5px;
        }

        @media screen and (max-width: 768px) {
            #meetingContainer {
                flex-direction: column;
            }

            .col-md-9,
            .col-md-3 {
                flex: 1 1 100%;
            }

            .video-box {
                max-width: 100%;
                height: auto;
            }
        }
    </style>
</head>

<body>
    <main class="container-fluid">
        <h1 class="text-center my-2">TeLis Video Classroom</h1>
        <div class="row">
            <!-- Video Section -->
            <div class="col-md-9" id="meetingContainer" style="display:none;">
                <div id="divUsers">
                    <!-- Local video -->
                    <div id="me" class="userbox">
                        <h5 class="user-name">Me</h5>
                        <video id="localVideoCtr" autoplay muted playsinline class="video-box"></video>
                    </div>
                    <!-- Remote videos template -->
                    <div id="remoteTemplate" class="userbox" style="display:none;">
                        <h5 class="user-name"></h5>
                        <video autoplay playsinline class="video-box"></video>
                    </div>
                </div>
            </div>

            <!-- Sidebar Chat & Participants -->
            <div class="col-md-3 bg-light p-2" id="sidebar">
                <h5>Participants</h5>
                <ul id="participantsList" class="list-group mb-2"></ul>
                <h5>Chat</h5>
                <div id="messages"></div>
                <div class="input-group mt-2">
                    <input type="text" id="msgbox" class="form-control" placeholder="Type a message">
                    <button id="btnSendMsg" class="btn btn-primary">Send</button>
                </div>
            </div>
        </div>

        <!-- Recording Buttons -->
        <div class="mt-3">
            <button id="start-recording" class="btn btn-danger">Start Recording</button>
            <button id="download-video" class="btn btn-success" disabled>Download Recording</button>
        </div>
    </main>

    <script>
        const socket = io(); // Initialize Socket.io
        let localStream;
        const peers = {}; // Store RTCPeerConnections
        let mediaRecorder;
        let recordedBlobs;

        $(function () {
            const urlParams = new URLSearchParams(window.location.search);
            const meetingID = urlParams.get('meetingID');
            let userID = urlParams.get('uid');
            if (!userID) userID = prompt("Enter your nickname");

            if (!meetingID || !userID) {
                alert("Meeting ID or user missing");
                window.location.href = "/sign";
                return;
            }

            $("#meetingContainer").show();
            initMedia();

            // Chat send
            $("#btnSendMsg").on("click", function () {
                const msg = $("#msgbox").val();
                if (msg.trim() !== "") {
                    socket.emit("sendMessage", { meetingID, userID, msg });
                    $("#msgbox").val("");
                    addMessage(`Me: ${msg}`);
                }
            });

            // Recording buttons
            $("#start-recording").on("click", startRecording);
            $("#download-video").on("click", downloadRecording);

            // Socket events
            socket.emit("joinMeeting", { meetingID, userID });

            socket.on("newParticipant", data => {
                if (!peers[data.userID]) {
                    createPeerConnection(data.userID, false);
                }
                updateParticipantsList(data.participants);
            });

            socket.on("signal", async data => {
                await handleSignal(data);
            });

            socket.on("receiveMessage", data => {
                addMessage(`${data.userID}: ${data.msg}`);
            });

            socket.on("participantLeft", data => {
                removePeer(data.userID);
                updateParticipantsList(data.participants);
            });
        });

        function addMessage(msg) {
            const msgDiv = $("#messages");
            msgDiv.append(`<div>${msg}</div>`);
            msgDiv.scrollTop(msgDiv[0].scrollHeight);
        }

        async function initMedia() {
            try {
                localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                $("#localVideoCtr")[0].srcObject = localStream;
            } catch (err) {
                alert("Could not access camera/microphone: " + err);
            }
        }

        function createPeerConnection(remoteUserID, isInitiator) {
            const pc = new RTCPeerConnection({ iceServers: [{ urls: "stun:stun.l.google.com:19302" }] });
            peers[remoteUserID] = pc;

            // Add local tracks
            localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

            // Remote track
            pc.ontrack = e => {
                const videoEl = $(`#remoteTemplate`).clone().removeAttr("id").show();
                videoEl.find("video")[0].srcObject = e.streams[0];
                videoEl.find(".user-name").text(remoteUserID);
                $("#divUsers").append(videoEl);
            };

            // ICE candidates
            pc.onicecandidate = event => {
                if (event.candidate) {
                    socket.emit("signal", { to: remoteUserID, candidate: event.candidate });
                }
            };

            if (isInitiator) {
                pc.createOffer().then(offer => pc.setLocalDescription(offer))
                    .then(() => {
                        socket.emit("signal", { to: remoteUserID, sdp: pc.localDescription });
                    });
            }
        }

        async function handleSignal(data) {
            const { userID: remoteUserID, sdp, candidate } = data;

            if (!peers[remoteUserID]) createPeerConnection(remoteUserID, false);

            const pc = peers[remoteUserID];

            if (sdp) {
                await pc.setRemoteDescription(new RTCSessionDescription(sdp));
                if (sdp.type === "offer") {
                    const answer = await pc.createAnswer();
                    await pc.setLocalDescription(answer);
                    socket.emit("signal", { to: remoteUserID, sdp: pc.localDescription });
                }
            }
            if (candidate) {
                await pc.addIceCandidate(new RTCIceCandidate(candidate));
            }
        }

        function removePeer(userID) {
            if (peers[userID]) {
                peers[userID].close();
                delete peers[userID];
            }
            $(`#divUsers video`).filter(function () {
                return $(this).siblings(".user-name").text() === userID;
            }).parent().remove();
        }

        function updateParticipantsList(participants) {
            const list = $("#participantsList");
            list.empty();
            participants.forEach(p => list.append(`<li class="list-group-item">${p}</li>`));
        }

        // Recording
        function startRecording() {
            recordedBlobs = [];
            try {
                mediaRecorder = new MediaRecorder(localStream);
            } catch (e) {
                console.error("MediaRecorder error:", e);
                return;
            }

            mediaRecorder.ondataavailable = e => {
                if (e.data && e.data.size > 0) recordedBlobs.push(e.data);
            };
            mediaRecorder.start();
            $("#start-recording").text("Stop Recording");
            $("#start-recording").off("click").on("click", stopRecording);
        }

        function stopRecording() {
            mediaRecorder.stop();
            $("#download-video").prop("disabled", false);
            $("#start-recording").text("Start Recording");
            $("#start-recording").off("click").on("click", startRecording);
        }

        function downloadRecording() {
            const blob = new Blob(recordedBlobs, { type: "video/webm" });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.style.display = "none";
            a.href = url;
            a.download = "recording.webm";
            document.body.appendChild(a);
            a.click();
            setTimeout(() => {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 100);
        }
    </script>
</body>
</html>
