<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>TeLis Video Classroom</title>
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link rel="stylesheet" href="/bootstrap.min.css">
<link rel="stylesheet" href="/style.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<style>
  body { margin:0; font-family: 'Segoe UI', sans-serif; }
  .video-box { width: 250px; height: 180px; background:black; margin:5px; border-radius:5px; }
  .userbox { display:flex; flex-direction:column; align-items:center; margin:5px; }
  #participantsList { max-height:200px; overflow-y:auto; }
  @media screen and (max-width: 768px){
    .video-box { width: 150px; height: 120px; }
  }
</style>
</head>
<body>

<main class="container-fluid">
  <h1 class="text-center">TeLis Video Classroom</h1>

  <div class="row">
    <!-- Video Section -->
    <div class="col-md-9" id="meetingContainer" style="display:none;">
      <div id="divUsers" class="d-flex flex-wrap">
        <!-- Local video -->
        <div id="me" class="userbox">
          <h5 class="user-name">Me</h5>
          <video id="localVideoCtr" autoplay muted playsinline class="video-box"></video>
        </div>
        <!-- Remote videos template -->
        <div id="remoteTemplate" class="userbox" style="display:none;">
          <h5 class="user-name"></h5>
          <video autoplay playsinline class="video-box"></video>
        </div>
      </div>
    </div>

    <!-- Sidebar Chat & Participants -->
    <div class="col-md-3 bg-light p-2">
      <h5>Participants</h5>
      <ul id="participantsList" class="list-group mb-2"></ul>
      <h5>Chat</h5>
      <div id="messages" style="height:300px; overflow-y:auto; border:1px solid #ccc; padding:5px;"></div>
      <div class="input-group mt-2">
        <input type="text" id="msgbox" class="form-control" placeholder="Type a message">
        <button id="btnSendMsg" class="btn btn-primary">Send</button>
      </div>
    </div>
  </div>

  <!-- Recording Buttons -->
  <div class="mt-3">
    <button id="start-recording" class="btn btn-danger">Start Recording</button>
    <button id="download-video" class="btn btn-success" disabled>Download Recording</button>
  </div>
</main>

<script>
const socket = io();
let localStream;
let peers = {};
let mediaRecorder;
let recordedBlobs;
let userID, meetingID;

$(function(){
  const urlParams = new URLSearchParams(window.location.search);
  meetingID = urlParams.get('meetingID');
  userID = urlParams.get('uid') || prompt("Enter your nickname");

  if(!meetingID || !userID){
    alert("Meeting ID or User ID missing");
    window.location.href = "/sign";
    return;
  }

  $("#meetingContainer").show();
  initLocalMedia().then(()=> socket.emit("joinMeeting",{meetingID, userID}));

  $("#btnSendMsg").click(function(){
    const msg = $("#msgbox").val();
    if(msg.trim()!==""){
      socket.emit("sendMessage",{meetingID,userID,message:msg});
      appendMessage(userID,msg);
      $("#msgbox").val("");
    }
  });

  // Recording buttons
  $("#start-recording").click(startStopRecording);
  $("#download-video").click(downloadRecording);
});

// Init camera + mic
async function initLocalMedia(){
  try{
    localStream = await navigator.mediaDevices.getUserMedia({video:true,audio:true});
    document.getElementById("localVideoCtr").srcObject = localStream;
  }catch(e){
    alert("Error accessing camera/mic: "+e.message);
  }
}

// Chat append
function appendMessage(sender,msg){
  const msgDiv = $("<div>").text(`${sender}: ${msg}`);
  $("#messages").append(msgDiv);
  $("#messages").scrollTop($("#messages")[0].scrollHeight);
}

// Participants
function addParticipant(id,name){
  if($("#participant-"+id).length) return;
  $("#participantsList").append(`<li class="list-group-item" id="participant-${id}">${name}</li>`);
}
function removeParticipant(id){
  $("#participant-"+id).remove();
  if(peers[id]) { peers[id].close(); delete peers[id]; }
  $("#divUsers #remote-"+id).remove();
}

// WebRTC signaling
socket.on("allUsers", users=>{
  users.forEach(remoteID=> createPeerConnection(remoteID,true));
});

socket.on("userJoined", data=>{
  addParticipant(data.userID,data.userName);
  createPeerConnection(data.userID,false);
});

socket.on("signal", async data=>{
  let pc = peers[data.from];
  if(!pc) pc = createPeerConnection(data.from,false);
  if(data.sdp){
    await pc.setRemoteDescription(new RTCSessionDescription(data.sdp));
    if(data.sdp.type==="offer"){
      const answer = await pc.createAnswer();
      await pc.setLocalDescription(answer);
      socket.emit("signal",{to:data.from,from:userID,sdp:pc.localDescription});
    }
  }
  if(data.candidate){
    try{ await pc.addIceCandidate(new RTCIceCandidate(data.candidate)); }
    catch(e){console.error(e);}
  }
});

socket.on("userLeft", id=> removeParticipant(id));

// PeerConnection
function createPeerConnection(remoteID,isOffer){
  if(peers[remoteID]) return peers[remoteID];
  const pc = new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]});
  peers[remoteID] = pc;

  localStream.getTracks().forEach(track=> pc.addTrack(track,localStream));

  pc.ontrack = event=>{
    let remoteDiv = document.getElementById("remote-"+remoteID);
    if(!remoteDiv){
      const template = document.getElementById("remoteTemplate");
      remoteDiv = template.cloneNode(true);
      remoteDiv.id = "remote-"+remoteID;
      remoteDiv.style.display = "flex";
      remoteDiv.querySelector("h5").textContent = remoteID;
      document.getElementById("divUsers").appendChild(remoteDiv);
    }
    remoteDiv.querySelector("video").srcObject = event.streams[0];
  };

  pc.onicecandidate = event=>{
    if(event.candidate) socket.emit("signal",{to:remoteID,from:userID,candidate:event.candidate});
  };

  if(isOffer){
    pc.createOffer().then(offer=>{
      pc.setLocalDescription(offer);
      socket.emit("signal",{to:remoteID,from:userID,sdp:offer});
    });
  }
  return pc;
}

// Recording
function startStopRecording(){
  if(!mediaRecorder || mediaRecorder.state==="inactive") startRecording();
  else stopRecording();
}
function startRecording(){
  recordedBlobs = [];
  try{ mediaRecorder = new MediaRecorder(localStream, {mimeType:"video/webm;codecs=vp9"}); }
  catch(e){ mediaRecorder = new MediaRecorder(localStream, {mimeType:"video/webm"}); }
  mediaRecorder.ondataavailable = e=> { if(e.data && e.data.size>0) recordedBlobs.push(e.data); };
  mediaRecorder.start();
  $("#start-recording").text("Stop Recording");
  $("#download-video").prop("disabled",true);
}
function stopRecording(){
  mediaRecorder.stop();
  $("#start-recording").text("Start Recording");
  $("#download-video").prop("disabled",false);
}
function downloadRecording(){
  const blob = new Blob(recordedBlobs,{type:"video/webm"});
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.style.display = "none";
  a.href = url;
  a.download = "recording.webm";
  document.body.appendChild(a);
  a.click();
  setTimeout(()=>{ document.body.removeChild(a); window.URL.revokeObjectURL(url); },100);
}
</script>
</body>
</html>
