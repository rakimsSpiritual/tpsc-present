<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>TeLis Video Classroom</title>
  <link rel="stylesheet" href="/style.css">
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/simple-peer@9.11.1/simplepeer.min.js"></script>
  <style>
    .video-box { width: 100%; max-width: 250px; height: auto; background: black; }
    .userbox { margin:5px; display:flex; flex-direction:column; align-items:center; }
    #messages { height:300px; overflow-y:auto; border:1px solid #ccc; padding:5px; }
    @media screen and (max-width: 768px) {
      .top-remote-video-show-wrap { flex-direction: column; }
      #meetingContainer { flex-basis:100% !important; }
    }
  </style>
</head>
<body>
<main>
  <div id="meetingContainer">
    <h1 id="meetingname"></h1>
    <div id="divUsers" class="d-flex flex-wrap">
      <div id="me" class="userbox">
        <h2 class="user-name"></h2>
        <video id="localVideoCtr" autoplay muted playsinline class="video-box"></video>
      </div>
      <div id="remoteTemplate" class="userbox" style="display:none">
        <h5 class="user-name"></h5>
        <video autoplay playsinline class="video-box"></video>
      </div>
    </div>
    <div id="participantsWrap">
      <h5>Participants</h5>
      <ul id="participantsList"></ul>
    </div>
    <div id="chatWrap">
      <h5>Chat</h5>
      <div id="messages"></div>
      <input type="text" id="msgbox" placeholder="Type a message"/>
      <button id="btnSendMsg">Send</button>
    </div>
  </div>
</main>

<script>
const socket = io();
let localStream;
let peers = {};
let userID = new URLSearchParams(window.location.search).get('uid') || prompt('Enter your nickname');
let meetingID = new URLSearchParams(window.location.search).get('meetingID');
if(!meetingID) alert('No meeting ID');

async function init() {
  localStream = await navigator.mediaDevices.getUserMedia({ video:true, audio:true });
  document.getElementById('localVideoCtr').srcObject = localStream;
  socket.emit('joinMeeting', { meetingID, userID });
}

socket.on('existingParticipants', participants => {
  participants.forEach(p => createPeer(p, true));
});

socket.on('newParticipant', p => createPeer(p, true));

socket.on('signal', async ({ fromID, signal }) => {
  if(!peers[fromID]) await createPeer(fromID, false);
  peers[fromID].signal(signal);
});

socket.on('participantLeft', id => {
  const el = document.getElementById('remote_' + id);
  if(el) el.remove();
  delete peers[id];
});

function createPeer(peerID, initiator) {
  const pc = new SimplePeer({ initiator, trickle:false, stream:localStream });
  pc.on('signal', data => socket.emit('signal', { toID: peerID, fromID:userID, signal:data }));
  pc.on('stream', stream => addRemoteVideo(peerID, stream));
  peers[peerID] = pc;
  return pc;
}

function addRemoteVideo(peerID, stream) {
  let template = document.getElementById('remoteTemplate');
  let clone = template.cloneNode(true);
  clone.id = 'remote_' + peerID;
  clone.style.display = 'block';
  clone.querySelector('h5').textContent = peerID;
  clone.querySelector('video').srcObject = stream;
  document.getElementById('divUsers').appendChild(clone);
  updateParticipants();
}

function updateParticipants() {
  const list = document.getElementById('participantsList');
  list.innerHTML = '';
  list.appendChild(createLi(userID));
  Object.keys(peers).forEach(id => list.appendChild(createLi(id)));
}

function createLi(name) {
  const li = document.createElement('li');
  li.textContent = name;
  return li;
}

// Chat send
function sendMessage() {
  const msg = $('#msgbox').val().trim();
  if(msg) {
    socket.emit('sendMessage', { meetingID, userID, msg });
    $('#msgbox').val('');
    $('#messages').scrollTop($('#messages')[0].scrollHeight);
  }
}
$('#btnSendMsg').on('click', sendMessage);

// Enter key listener
$('#msgbox').on('keydown', function(e) {
  if(e.key==='Enter' && !e.shiftKey) { e.preventDefault(); sendMessage(); }
});

init();
</script>
</body>
</html>
