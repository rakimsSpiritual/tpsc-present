<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>TeLis Video Classroom</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link rel="stylesheet" href="/bootstrap.min.css">
<link rel="stylesheet" href="/style.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://unpkg.com/simple-peer@9.11.1/simplepeer.min.js"></script>
</head>
<body>
<main class="container-fluid">
<h1>TeLis Video Classroom</h1>
<div class="row">
<div class="col-md-9" id="meetingContainer" style="display:none">
    <div id="divUsers" class="d-flex flex-wrap">
        <div id="me" class="userbox m-1">
            <h5 class="user-name">Me</h5>
            <video id="localVideoCtr" autoplay muted playsinline class="video-box"></video>
        </div>
        <div id="remoteTemplate" class="userbox m-1" style="display:none;">
            <h5 class="user-name"></h5>
            <video autoplay playsinline class="video-box"></video>
        </div>
    </div>
</div>

<div class="col-md-3 bg-light p-2">
    <h5>Participants</h5>
    <ul id="participantsList" class="list-group mb-2"></ul>
    <h5>Chat</h5>
    <div id="messages" style="height:300px; overflow-y:auto; border:1px solid #ccc; padding:5px;"></div>
    <div class="input-group mt-2">
        <input type="text" id="msgbox" class="form-control" placeholder="Type a message">
        <button id="btnSendMsg" class="btn btn-primary">Send</button>
    </div>
</div>
</div>

<div class="mt-3">
    <button id="start-recording" class="btn btn-danger">Start Recording</button>
    <button id="download-video" class="btn btn-success" disabled>Download Recording</button>
</div>
</main>

<style>
.video-box { width: 250px; height: 180px; background: black; }
.userbox { position: relative; }
#participantsList { max-height: 200px; overflow-y: auto; }
</style>

<script>
$(function(){
    const socket = io();
    const urlParams = new URLSearchParams(window.location.search);
    const meetingID = urlParams.get('meetingID');
    let userID = urlParams.get('uid') || prompt("Enter your nickname");

    if(!meetingID || !userID){
        alert("Meeting ID or user missing");
        window.location.href = "/sign";
        return;
    }

    $("#meetingContainer").show();

    let localStream;
    let peers = {};
    const iceServers = [{ urls: "stun:stun.l.google.com:19302" }];

    async function initLocalStream(){
        try{
            localStream = await navigator.mediaDevices.getUserMedia({ video:true, audio:true });
            $("#localVideoCtr")[0].srcObject = localStream;
        } catch(err){
            alert("Cannot access camera/mic: "+err);
        }
    }

    initLocalStream().then(()=>socket.emit("joinMeeting", { meetingID, userID }));

    function createPeer(targetID, initiator){
        const peer = new SimplePeer({ initiator, trickle:false, stream: localStream, config:{iceServers} });
        peer.on('signal', data=>socket.emit('signal',{ targetID, fromID:userID, signal:data }));
        peer.on('stream', stream=>addRemoteStream(targetID, stream));
        return peer;
    }

    function addRemoteStream(id, stream){
        let elem = document.getElementById(id);
        if(!elem){
            const template = $("#remoteTemplate").clone();
            template.attr("id", id).show();
            template.find("h5").text(id);
            template.find("video")[0].srcObject = stream;
            $("#divUsers").append(template);
        } else elem.querySelector("video").srcObject = stream;
    }

    function updateParticipants(){
        $("#participantsList").empty();
        for(let id in peers) $("#participantsList").append("<li class='list-group-item'>"+id+"</li>");
        $("#participantsList").append("<li class='list-group-item'>Me: "+userID+"</li>");
    }

    socket.on("signal", ({fromID, signal})=>{
        if(!peers[fromID]) peers[fromID]=createPeer(fromID,false);
        peers[fromID].signal(signal);
    });

    socket.on("newParticipant", ({id})=>{
        peers[id]=createPeer(id,true);
        updateParticipants();
    });

    socket.on("participantLeft", id=>{
        if(peers[id]){ peers[id].destroy(); delete peers[id]; }
        const elem=document.getElementById(id); if(elem) elem.remove();
        updateParticipants();
    });

    socket.on("message", ({from, text})=>{
        $("#messages").append("<div><b>"+from+":</b> "+text+"</div>");
        $("#messages").scrollTop($("#messages")[0].scrollHeight);
    });

    $("#btnSendMsg").on("click", ()=>{
        const msg=$("#msgbox").val().trim();
        if(msg!==""){
            socket.emit("sendMessage",{meetingID, from:userID, text:msg});
            $("#msgbox").val("");
        }
    });

    let mediaRecorder, recordedBlobs;
    $("#start-recording").on("click", async ()=>{
        if($("#start-recording").text()==="Start Recording"){
            recordedBlobs=[];
            mediaRecorder=new MediaRecorder(localStream,{mimeType:'video/webm;codecs=vp8,opus'});
            mediaRecorder.ondataavailable=e=>{ if(e.data && e.data.size>0) recordedBlobs.push(e.data); };
            mediaRecorder.start();
            $("#start-recording").text("Stop Recording");
            $("#download-video").prop("disabled",true);
        } else {
            mediaRecorder.stop();
            $("#start-recording").text("Start Recording");
            $("#download-video").prop("disabled",false);
        }
    });

    $("#download-video").on("click", ()=>{
        const blob=new Blob(recordedBlobs,{type:'video/webm'});
        const url=window.URL.createObjectURL(blob);
        const a=document.createElement('a');
        a.style.display='none'; a.href=url; a.download='recording.webm';
        document.body.appendChild(a); a.click();
        setTimeout(()=>{document.body.removeChild(a); window.URL.revokeObjectURL(url);},100);
    });

});
</script>
</body>
</html>
