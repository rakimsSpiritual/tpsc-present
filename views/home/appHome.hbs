<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>TeLis Video Classroom</title>
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link rel="stylesheet" href="./../../materialize.min.css">
<link rel="stylesheet" href="./../../stylee.css">
<style>
body{background:#222;color:#eee;font-family:'Segoe UI',sans-serif;}
.video-box{width:100%;max-width:250px;height:auto;background:black;}
.userbox{margin:5px;display:flex;flex-direction:column;align-items:center;}
.g-right-details-wrap{flex-basis:25%;padding:10px;border-left:1px solid #555;max-height:90vh;overflow-y:auto;}
#messages{height:250px;overflow-y:auto;padding:5px;border:1px solid #ccc;background:#111;color:#fff;}
@media screen and (max-width:768px){
.g-right-details-wrap{flex-basis:100%!important;margin-top:10px;}
}
</style>
</head>

<body>
<div class="header-bar">
    <div style="font-weight:bold;">TPSC Video Classroom Session</div>
    <div class="info-group">
        <div id="clock"></div>
        <div id="day"></div>
        <div id="ip"></div>
        <div id="location"></div>
    </div>
</div>

<main class="container-fluid d-flex flex-column home-wrap">
<div id="meetingContainer" style="display:flex;flex-basis:100%;">
<div style="flex-basis:75%;">
<h4 id="meetingname"></h4>
<div class="call-wrap">
<div id="divUsers" class="video-wrap d-flex flex-wrap">
<div id="me" class="userbox"><h6 class="user-name"></h6><video id="localVideoCtr" autoplay muted playsinline class="video-box"></video></div>
</div>
</div>
</div>

<div class="g-right-details-wrap">
<h6>Participants</h6>
<ul id="participantsList" class="collection"></ul>
<h6>Chat</h6>
<div id="messages"></div>
<div class="input-field mt-2">
<input type="text" id="msgbox" placeholder="Type message">
<button id="btnSendMsg" class="btn teal darken-2" style="margin-top:5px;">Send</button>
</div>
</div>
</div>

<div class="mt-3">
<button id="start-recording" class="btn red">Start Recording</button>
<button id="download-video" class="btn green" disabled>Download Recording</button>
</div>
</main>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://unpkg.com/mediasoup-client@3/lib/index.js"></script>

<script>
$(function(){
const urlParams=new URLSearchParams(window.location.search);
const meetingID=urlParams.get('meetingID');
let userID=urlParams.get('uid')||prompt('Enter your nickname!');
if(!meetingID||!userID){ alert('MeetingID or Nickname missing!'); return; }

$("#meetingContainer").show();
const socket=io();
const peers={}, remoteVideos={};
let localStream, mediaRecorder, recordedChunks=[];

// Clock & Location
function updateTime(){
const now=new Date();
$("#clock").text(`Time: ${now.toLocaleTimeString()}`);
$("#day").text(`Date: ${now.toLocaleDateString(undefined,{ weekday:'long', year:'numeric', month:'long', day:'numeric'})}`);
}
setInterval(updateTime,1000); updateTime();
fetch('https://ipapi.co/json/').then(res=>res.json()).then(data=>{$("#ip").text(`IP: ${data.ip}`);$("#location").text(`Location: ${data.city}, ${data.country_name}`);});

// Initialize Media
async function initMedia(){
localStream=await navigator.mediaDevices.getUserMedia({video:true,audio:true});
$("#localVideoCtr")[0].srcObject=localStream;
}

// UI Helpers
function addRemoteVideo(peerID,stream){
if(remoteVideos[peerID]) return;
const div=$('<div class="userbox"><h6 class="user-name"></h6><video autoplay playsinline class="video-box"></video></div>');
div.find('.user-name').text(peerID);
div.find('video')[0].srcObject=stream;
$("#divUsers").append(div);
remoteVideos[peerID]=div;
updateParticipants();
}
function removeRemoteVideo(peerID){if(remoteVideos[peerID]) remoteVideos[peerID].remove(), delete remoteVideos[peerID], updateParticipants();}
function updateParticipants(){const list=$("#participantsList"); list.empty(); list.append(`<li class="collection-item">${userID}</li>`); Object.keys(remoteVideos).forEach(id=>list.append(`<li class="collection-item">${id}</li>`));}

// Initialize
initMedia().then(()=> socket.emit('joinMeeting',{meetingID,userID}));

// Chat
function sendMsg(){ 
const text=$("#msgbox").val().trim(); 
if(!text) return;
socket.emit('sendMessage',{meetingID,userID,msg:text});
$("#msgbox").val('');
}
$("#btnSendMsg").on('click',sendMsg);
$("#msgbox").on('keydown',e=>{if(e.key==='Enter') sendMsg();});
socket.on('receiveMessage',({userID:from,msg})=>{$("#messages").append(`<div>${from}: ${msg}</div>`); $("#messages").scrollTop($("#messages")[0].scrollHeight);});

// Mediasoup
let device, sendTransport, recvTransport, consumers=[];
async function createRecvTransport(){return new Promise(resolve=>{socket.emit('createTransport', null, async transportData=>{const transport=device.createRecvTransport(transportData); transport.on('connect', ({ dtlsParameters }, callback)=>{socket.emit('connectTransport',{transportId: transport.id, dtlsParameters}); callback();}); resolve(transport);});});}

socket.on('connect', async ()=>{
socket.emit('createTransport', null, async transportData=>{
device=new mediasoup.Device();
await device.load({routerRtpCapabilities: transportData.rtpCapabilities});
sendTransport=device.createSendTransport(transportData);
sendTransport.on('connect', ({ dtlsParameters }, callback)=>{socket.emit('connectTransport',{transportId: sendTransport.id, dtlsParameters}); callback();});
sendTransport.on('produce', async ({ kind, rtpParameters }, callback)=>{socket.emit('produce',{kind, rtpParameters}, callback);});

localStream.getTracks().forEach(track=>sendTransport.produce({ track }));

socket.on('newProducer', async ({ producerId, producerSocketId, kind })=>{
if(producerSocketId===socket.id) return;
recvTransport = await createRecvTransport();
recvTransport.consume({ producerId }, ({ id, kind, rtpParameters })=>{
const stream=new MediaStream(); stream.addTrack(track); addRemoteVideo(producerSocketId, stream);
});
});
});

// Recording
$("#start-recording").on('click',()=>{
recordedChunks=[];
const combinedStream=new MediaStream();
localStream.getTracks().forEach(t=>combinedStream.addTrack(t));
Object.values(remoteVideos).forEach(vEl=>{
const v=vEl.find('video')[0]; if(v.srcObject) v.srcObject.getTracks().forEach(t=>combinedStream.addTrack(t));
});
mediaRecorder=new MediaRecorder(combinedStream);
mediaRecorder.ondataavailable=e=>{ if(e.data.size>0) recordedChunks.push(e.data); };
mediaRecorder.start();
$("#start-recording").prop("disabled",true); $("#download-video").prop("disabled",false);
});
$("#download-video").on('click',()=>{
if(mediaRecorder) mediaRecorder.stop();
const blob=new Blob(recordedChunks,{type:'video/webm'});
const url=URL.createObjectURL(blob);
const a=document.createElement('a'); a.href=url; a.download='recording.webm'; a.click();
$("#start-recording").prop("disabled",false);
});
});
</script>
</body>
</html>
