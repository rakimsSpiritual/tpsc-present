<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>TeLis Video Classroom</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- CSS Libraries -->
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link rel="stylesheet" href="/bootstrap.min.css">
<link rel="stylesheet" href="/style.css">

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="/socket.io/socket.io.js"></script>

<style>
body { margin:0; font-family: 'Segoe UI', sans-serif; background: #f0f2f5; }
.video-box { width: 250px; height: 180px; background: black; margin:5px; }
.userbox { position: relative; display:flex; flex-direction: column; align-items:center; }
#participantsList { max-height: 200px; overflow-y:auto; }
#messages { height: 200px; overflow-y:auto; border:1px solid #ccc; padding:5px; }
@media(max-width:768px){
  .video-box { width: 100%; height: auto; }
  #divUsers { flex-direction: column; }
}
</style>
</head>
<body>
<main class="container-fluid">
    <h1 class="text-center my-2">TeLis Video Classroom</h1>
    <div class="row">
        <!-- Video Section -->
        <div class="col-md-9" id="meetingContainer">
            <div id="divUsers" class="d-flex flex-wrap">
                <!-- Local video -->
                <div id="me" class="userbox">
                    <h5 class="user-name">Me</h5>
                    <video id="localVideoCtr" autoplay muted playsinline class="video-box"></video>
                </div>
                <!-- Remote videos template -->
                <div id="remoteTemplate" class="userbox" style="display:none;">
                    <h5 class="user-name"></h5>
                    <video autoplay playsinline class="video-box"></video>
                </div>
            </div>
        </div>

        <!-- Sidebar Chat & Participants -->
        <div class="col-md-3 bg-light p-2">
            <h5>Participants</h5>
            <ul id="participantsList" class="list-group mb-2"></ul>
            <h5>Chat</h5>
            <div id="messages"></div>
            <div class="input-group mt-2">
                <input type="text" id="msgbox" class="form-control" placeholder="Type a message">
                <button id="btnSendMsg" class="btn btn-primary">Send</button>
            </div>
        </div>
    </div>

    <!-- Recording Buttons -->
    <div class="mt-3">
        <button id="start-recording" class="btn btn-danger">Start Recording</button>
        <button id="download-video" class="btn btn-success" disabled>Download Recording</button>
    </div>
</main>

<script>
const socket = io();
let localStream;
let peers = {};
const urlParams = new URLSearchParams(window.location.search);
const meetingID = urlParams.get('meetingID');
let userID = urlParams.get('uid') || prompt("Enter your nickname");

// Redirect if missing
if(!meetingID || !userID){
    alert("Meeting ID or user missing");
    window.location.href = "/sign";
}

// Initialize
$(function(){
    $("#meetingContainer").show();
    startLocalStream();
    setupSocket();
    setupChat();
});

async function startLocalStream(){
    try {
        localStream = await navigator.mediaDevices.getUserMedia({video:true, audio:true});
        $("#localVideoCtr")[0].srcObject = localStream;
    } catch(e){
        alert("Could not access camera/microphone: "+e);
        console.error(e);
    }
}

function setupSocket(){
    socket.emit("joinRoom", {meetingID, userID});

    socket.on("allUsers", users => {
        users.forEach(u => {
            if(u.userID !== userID) createPeer(u.userID, true);
        });
        updateParticipantsList(users.concat({userID}));
    });

    socket.on("userJoined", user => {
        if(user.userID !== userID) createPeer(user.userID, false);
        updateParticipantsList([...Object.keys(peers).map(id=>({userID:id})), {userID}]);
    });

    socket.on("signal", async data => {
        const peer = peers[data.from];
        if(peer){
            await peer.pc.setRemoteDescription(new RTCSessionDescription(data.signal));
            if(data.signal.type === "offer"){
                const answer = await peer.pc.createAnswer();
                await peer.pc.setLocalDescription(answer);
                socket.emit("signal", {to:data.from, from:userID, signal:answer});
            }
        }
    });

    socket.on("userLeft", id=>{
        if(peers[id]){
            peers[id].video.parentNode.remove();
            peers[id].pc.close();
            delete peers[id];
        }
        updateParticipantsList(Object.keys(peers).map(id=>({userID:id})).concat({userID}));
    });
}

function createPeer(remoteID, initiator){
    const videoTemplate = $("#remoteTemplate").clone().removeAttr("id").show();
    videoTemplate.find("h5").text(remoteID);
    const videoEl = videoTemplate.find("video")[0];
    $("#divUsers").append(videoTemplate);

    const pc = new RTCPeerConnection({
        iceServers:[{urls:"stun:stun.l.google.com:19302"}]
    });

    localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

    pc.ontrack = event => {
        videoEl.srcObject = event.streams[0];
    };

    pc.onicecandidate = event => {
        if(event.candidate) return;
        if(initiator) return;
        socket.emit("signal", {to:remoteID, from:userID, signal:pc.localDescription});
    };

    peers[remoteID] = {pc, video:videoEl};

    if(initiator){
        pc.createOffer().then(offer=>{
            pc.setLocalDescription(offer);
            socket.emit("signal",{to:remoteID, from:userID, signal:offer});
        });
    }
}

// Update participant list
function updateParticipantsList(users){
    $("#participantsList").empty();
    users.forEach(u=>{
        const li = $("<li>").addClass("list-group-item").text(u.userID);
        $("#participantsList").append(li);
    });
}

// Chat
function setupChat(){
    $("#btnSendMsg").on("click", ()=>{
        const msg = $("#msgbox").val();
        if(msg.trim()!==""){
            socket.emit("sendMessage", {userID,msg,meetingID});
            $("#msgbox").val("");
        }
    });

    socket.on("newMessage", data=>{
        $("#messages").append($("<div>").text(data.userID+": "+data.msg));
        $("#messages").scrollTop($("#messages")[0].scrollHeight);
    });
}

// Recording
let mediaRecorder, recordedBlobs;
$("#start-recording").on("click", async ()=>{
    if($("#start-recording").text() === "Start Recording"){
        recordedBlobs = [];
        mediaRecorder = new MediaRecorder(localStream, {mimeType:'video/webm;codecs=vp9,opus'});
        mediaRecorder.ondataavailable = e=>{if(e.data.size>0) recordedBlobs.push(e.data)};
        mediaRecorder.start();
        $("#start-recording").text("Stop Recording");
        $("#download-video").prop("disabled",true);
    } else {
        mediaRecorder.stop();
        $("#start-recording").text("Start Recording");
        $("#download-video").prop("disabled",false);
    }
});

$("#download-video").on("click", ()=>{
    const blob = new Blob(recordedBlobs,{type:'video/webm'});
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.style.display="none";
    a.href=url;
    a.download="recording.webm";
    document.body.appendChild(a);
    a.click();
    setTimeout(()=>{document.body.removeChild(a); window.URL.revokeObjectURL(url)},100);
});
</script>
</body>
</html>
