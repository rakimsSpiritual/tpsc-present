<!DOCTYPE html>
<html>

<head>
    <meta name="viewport" content="width=device-width" />
    <title>TeLis Video Classroom</title>
    <link href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css" rel="stylesheet">
    <script src="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="./../../bootstrap.min.css">
    <link rel="stylesheet" href="./../../style.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>
    <script src="./../../jquery-3.4.1.min.js"></script>
    <style>
        .video-box {
            width: 100%;
            max-width: 300px;
            height: 180px;
            background: black;
        }

        .userbox {
            position: relative;
            margin: 5px;
        }

        .video-wrap {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }

        @media screen and (max-width: 768px) {
            .top-remote-video-show-wrap {
                flex-direction: column;
            }

            #meetingContainer,
            .g-right-details-wrap {
                flex-basis: 100% !important;
            }

            .video-box {
                width: 90%;
                height: auto;
            }
        }
    </style>
</head>

<body>
    <div id="meetingbox" style="display: none;">
        <p>It seems you are not trying to join any meeting!
            You may start a new meeting. Here is generated for you. <a id='meetingid' href="#"></a>
        </p>
    </div>

    <main class="container-fluid d-flex flex-column home-wrap">
        <div class="g-top text-light">
            <div class="top-remote-video-show-wrap d-flex">
                <div id="meetingContainer" style="display: none;flex-basis: 75%;">
                    <h1 id='meetingname'></h1>
                    <div class="call-wrap " style="background-color: black;">
                        <div id='divUsers' class="video-wrap">
                            <div id="me" class="userbox div-center-column">
                                <h2 class="display-center user-name" style="font-size: 14px;"></h2>
                                <div class="display-center">
                                    <video autoplay muted id="localVideoCtr" playsinline class="video-box"></video>
                                </div>
                            </div>
                            <div id="otherTemplate" class="userbox div-center-column" style="display:none">
                                <h2 class="display-center user-name" style="font-size: 14px;"></h2>
                                <div class="display-center">
                                    <video autoplay playsinline class="video-box"></video>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="g-right-details-wrap bg-light text-secondary h-100" style="flex-basis: 25%;z-index: 1;display: none;">
                    <h5>Participants</h5>
                    <ul id="participantsList" class="list-group mb-2"></ul>
                    <h5>Chat</h5>
                    <div id="messages" style="height:300px; overflow-y:auto; border:1px solid #ccc; padding:5px;"></div>
                    <div class="input-group mt-2">
                        <input type="text" id="msgbox" class="form-control" placeholder="Type a message">
                        <button id="btnSendMsg" class="btn btn-primary">Send</button>
                    </div>
                </div>
            </div>

            <div class="mt-3">
                <button id="start-recording" class="btn btn-danger">Start Recording</button>
                <button id="download-video" class="btn btn-success" disabled>Download Recording</button>
            </div>
        </div>
    </main>

    <script>
        $(function () {
            const urlParams = new URLSearchParams(window.location.search);
            const meetingID = urlParams.get('meetingID');
            let userID = urlParams.get('uid');
            if (!userID) userID = prompt('Enter your nickname');
            if (!meetingID || !userID) {
                $("#meetingbox").show();
                $("#meetingContainer").hide();
                return;
            }

            $("#meetingContainer").show();

            const socket = io();
            const peers = {};
            const localVideo = document.getElementById('localVideoCtr');
            const remoteVideos = {};
            let localStream;
            let mediaRecorder;
            let recordedChunks = [];

            async function initMedia() {
                try {
                    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                    localVideo.srcObject = localStream;
                } catch (err) {
                    alert('Error accessing camera/mic: ' + err.message);
                }
            }

            function addRemoteVideo(id, stream) {
                if (remoteVideos[id]) return;
                let template = document.getElementById('otherTemplate');
                let clone = template.cloneNode(true);
                clone.style.display = 'flex';
                clone.id = 'remote_' + id;
                clone.querySelector('.user-name').textContent = id;
                let videoEl = clone.querySelector('video');
                videoEl.srcObject = stream;
                document.getElementById('divUsers').appendChild(clone);
                remoteVideos[id] = clone;
                updateParticipantsList();
            }

            function removeRemoteVideo(id) {
                if (remoteVideos[id]) {
                    remoteVideos[id].remove();
                    delete remoteVideos[id];
                    updateParticipantsList();
                }
            }

            function updateParticipantsList() {
                const list = document.getElementById('participantsList');
                list.innerHTML = '';
                list.appendChild(createListItem(userID));
                for (let id in remoteVideos) list.appendChild(createListItem(id));
            }

            function createListItem(name) {
                const li = document.createElement('li');
                li.className = 'list-group-item';
                li.textContent = name;
                return li;
            }

            initMedia().then(() => {
                socket.emit('joinMeeting', { meetingID, userID });
            });

            socket.on('newParticipant', ({ participants, userID: newUser }) => {
                for (let id of participants) {
                    if (id !== userID && !peers[id]) {
                        createPeerConnection(id, true);
                    }
                }
            });

            function createPeerConnection(peerID, isOffer) {
                const pc = new RTCPeerConnection();
                peers[peerID] = pc;
                localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

                pc.ontrack = (event) => addRemoteVideo(peerID, event.streams[0]);

                pc.onicecandidate = (event) => {
                    if (event.candidate) {
                        socket.emit('signal', {
                            targetID: peerID,
                            fromID: userID,
                            signal: { candidate: event.candidate }
                        });
                    }
                };

                if (isOffer) {
                    pc.createOffer().then(offer => {
                        pc.setLocalDescription(offer);
                        socket.emit('signal', {
                            targetID: peerID,
                            fromID: userID,
                            signal: { sdp: offer }
                        });
                    });
                }

                return pc;
            }

            socket.on('signal', async ({ fromID, signal }) => {
                if (!peers[fromID]) createPeerConnection(fromID, false);
                const pc = peers[fromID];
                if (signal.sdp) {
                    await pc.setRemoteDescription(new RTCSessionDescription(signal.sdp));
                    if (signal.sdp.type === 'offer') {
                        const answer = await pc.createAnswer();
                        await pc.setLocalDescription(answer);
                        socket.emit('signal', {
                            targetID: fromID,
                            fromID: userID,
                            signal: { sdp: answer }
                        });
                    }
                } else if (signal.candidate) {
                    await pc.addIceCandidate(new RTCIceCandidate(signal.candidate));
                }
            });

            socket.on('participantLeft', ({ userID: leaving }) => {
                removeRemoteVideo(leaving);
                if (peers[leaving]) peers[leaving].close();
                delete peers[leaving];
            });

            // Chat
            socket.on('receiveMessage', ({ userID: from, msg }) => {
                const div = document.createElement('div');
                div.textContent = `${from}: ${msg}`;
                document.getElementById('messages').appendChild(div);
            });

            $('#btnSendMsg').on('click', () => {
                const text = $('#msgbox').val();
                if (text.trim() !== '') {
                    socket.emit('sendMessage', { meetingID, userID, msg: text });
                    $('#msgbox').val('');
                }
            });

            // Recording
            function startRecording() {
                recordedChunks = [];
                const combinedStream = new MediaStream();
                localStream.getTracks().forEach(t => combinedStream.addTrack(t));
                for (let id in remoteVideos) {
                    const v = remoteVideos[id].querySelector('video');
                    if (v.srcObject) v.srcObject.getTracks().forEach(t => combinedStream.addTrack(t));
                }
                mediaRecorder = new MediaRecorder(combinedStream);
                mediaRecorder.ondataavailable = e => {
                    if (e.data.size > 0) recordedChunks.push(e.data);
                };
                mediaRecorder.start();
                $("#start-recording").prop("disabled", true);
                $("#download-video").prop("disabled", false);
            }

            function stopRecording() {
                if (media
