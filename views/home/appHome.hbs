<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>TPSC Classroom</title>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<style>
  video { width: 200px; margin:5px; background:black; }
  #videos { display:flex; flex-wrap:wrap; }
</style>
</head>
<body>
<h1>TPSC Video Classroom</h1>
<div id="videos">
  <video id="localVideo" autoplay muted playsinline></video>
</div>
<input type="text" id="msgbox" placeholder="Type a message"/>
<button id="btnSendMsg">Send</button>
<div id="messages" style="height:200px; overflow:auto; border:1px solid #ccc;"></div>

<script>
const socket = io();
let localStream, userID, meetingID;
let transports = [], producers = [], consumers = [];

(async function init() {
  const params = new URLSearchParams(window.location.search);
  meetingID = params.get("meetingID") || prompt("Enter meeting ID:");
  userID = params.get("uid") || prompt("Enter your name:");

  const localVid = document.getElementById("localVideo");
  localStream = await navigator.mediaDevices.getUserMedia({ video:true, audio:true });
  localVid.srcObject = localStream;

  socket.emit("joinMeeting", { meetingID, userID });

  // --- Create transport & produce ---
  socket.emit("createWebRtcTransport", {}, async transportData => {
    const pcTransportId = transportData.id;

    // Connect
    await socket.emit("transport-connect", { dtlsParameters: transportData.dtlsParameters, transportId: pcTransportId });

    // Produce
    for(const track of localStream.getTracks()) {
      await socket.emit("transport-produce", { kind: track.kind, rtpParameters: {} /* simplified for example */, transportId: pcTransportId }, () => {});
    }

    transports.push({ id: pcTransportId });
  });

  // Listen for new producers
  socket.on("new-producer", async ({ producerId, kind, userId }) => {
    // Consume
    await socket.emit("consume", { producerId, transportId: transports[0].id }, consumerData => {
      const track = new MediaStream([consumerData.track]);
      const vid = document.createElement("video");
      vid.srcObject = track;
      vid.autoplay = true;
      vid.playsInline = true;
      vid.id = `remote-${userId}`;
      document.getElementById("videos").appendChild(vid);
    });
  });
})();

// --- Chat ---
$("#btnSendMsg").on("click", () => {
  const msg = $("#msgbox").val().trim();
  if(msg) {
    socket.emit("sendMessage", { meetingID, user: userID, message: msg });
    $("#msgbox").val("");
  }
});
$("#msgbox").on("keypress", e => { if(e.key === "Enter") $("#btnSendMsg").click(); });
</script>
</body>
</html>
