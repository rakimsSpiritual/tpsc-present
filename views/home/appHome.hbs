<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>TeLis Video Classroom</title>
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link rel="stylesheet" href="./../../bootstrap.min.css">
<link rel="stylesheet" href="./../../style.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
</head>
<body>
<main class="container-fluid d-flex flex-column home-wrap">
  <div id="meetingbox" style="display:none;">
    <p>No meeting joined! <a id='meetingid' href="#"></a></p>
  </div>

  <div class="g-top text-light">
    <div class="top-remote-video-show-wrap d-flex flex-wrap">
      <div id="meetingContainer" style="display:none;flex-basis:75%;">
        <h1 id='meetingname'></h1>
        <div class="call-wrap bg-black p-2">
          <div id='divUsers' class="video-wrap d-flex flex-wrap">
            <div id="me" class="userbox d-flex flex-column align-items-center m-1">
              <h2 class="user-name text-center" style="font-size:14px;"></h2>
              <video id="localVideoCtr" autoplay muted playsinline class="video-box"></video>
            </div>
            <div id="otherTemplate" class="userbox d-flex flex-column align-items-center m-1" style="display:none">
              <h2 class="user-name text-center" style="font-size:14px;"></h2>
              <video autoplay playsinline class="video-box"></video>
            </div>
          </div>
        </div>
      </div>

      <div class="g-right-details-wrap bg-light text-secondary h-100 p-2" style="flex-basis:25%;display:none;">
        <h5>Participants</h5>
        <ul id="participantsList" class="list-group mb-2"></ul>
        <h5>Chat</h5>
        <div id="messages" style="height:300px; overflow-y:auto; border:1px solid #ccc; padding:5px;"></div>
        <div class="input-group mt-2">
          <input type="text" id="msgbox" class="form-control" placeholder="Type a message">
          <button id="btnSendMsg" class="btn btn-primary">Send</button>
        </div>
      </div>
    </div>

    <div class="mt-3">
      <button id="start-recording" class="btn btn-danger">Start Recording</button>
      <button id="download-video" class="btn btn-success" disabled>Download Recording</button>
    </div>
  </div>
</main>

<script src="https://unpkg.com/mediasoup-client@3/lib/index.js"></script>
<script>
const socket = io();
let device, producerTransport, consumerTransports = [], producers = [], localStream, userID, meetingID;

$(function(){
  const urlParams = new URLSearchParams(window.location.search);
  meetingID = urlParams.get('meetingID');
  userID = urlParams.get('uid') || prompt('Enter your nickname');
  if(!meetingID || !userID){ $("#meetingbox").show(); return; }
  $("#meetingContainer").show();

  navigator.mediaDevices.getUserMedia({video:true,audio:true}).then(stream=>{
    localStream = stream;
    $("#localVideoCtr")[0].srcObject = stream;
    initMediasoup();
    initChat();
  }).catch(err=>alert("Camera/Mic failed: "+err.message));

  function initChat(){
    $("#btnSendMsg").on("click", sendChat);
    $("#msgbox").on("keypress", e=>{if(e.key==="Enter") sendChat();});
  }

  function sendChat(){
    const msg = $("#msgbox").val().trim();
    if(msg){ socket.emit("sendMessage",{meetingID,userID,msg}); $("#msgbox").val(''); }
  }

  async function initMediasoup(){
    const routerRtpCapabilities = await new Promise(res=>socket.emit("getRouterRtpCapabilities",null,res));
    device = new mediasoupClient.Device();
    await device.load({routerRtpCapabilities});

    const transportData = await new Promise(res=>socket.emit("createTransport",null,res));
    producerTransport = device.createSendTransport(transportData);

    producerTransport.on("connect", ({ dtlsParameters }, callback, errback)=>{
      socket.emit("connectTransport",{ transportId: producerTransport.id, dtlsParameters }, callback);
    });

    producerTransport.on("produce", async ({ kind, rtpParameters }, callback, errback)=>{
      const {id} = await new Promise(res=>socket.emit("produce",{ transportId: producerTransport.id, kind, rtpParameters }, res));
      callback({ id });
    });

    // Produce audio/video
    localStream.getTracks().forEach(track=>producerTransport.produce({ track, appData:{userID} }));

    socket.on("newProducer", ({ producerId, userID:newUser, kind })=>{
      consume(newUser, producerId);
    });
  }

  async function consume(peerID, producerId){
    const transportData = await new Promise(res=>socket.emit("createTransport",null,res));
    const consumerTransport = device.createRecvTransport(transportData);
    consumerTransports.push(consumerTransport);

    consumerTransport.on("connect", ({ dtlsParameters }, callback, errback)=>{
      socket.emit("connectTransport",{ transportId: consumerTransport.id, dtlsParameters }, callback);
    });

    const { id, rtpParameters, kind } = await new Promise(res=>socket.emit("consume",{ producerId, rtpCapabilities: device.rtpCapabilities }, res));

    const consumer = await consumerTransport.consume({ id, producerId, kind, rtpParameters });
    const stream = new MediaStream();
    stream.addTrack(consumer.track);

    let remoteDiv = $("#remote_" + peerID);
    if(remoteDiv.length===0){
      let clone = $("#otherTemplate").clone().attr("id","remote_"+peerID).show();
      clone.find(".user-name").text(peerID);
      clone.find("video")[0].srcObject = stream;
      $("#divUsers").append(clone);
    }else{
      remoteDiv.find("video")[0].srcObject = stream;
    }
  }
});
</script>

<style>
.video-box{width:100%;max-width:250px;height:auto;background:black;}
.userbox{margin:5px;display:flex;flex-direction:column;align-items:center;}
@media screen and (max-width:768px){.top-remote-video-show-wrap{flex-direction:column;}#meetingContainer{flex-basis:100%!important;}.g-right-details-wrap{flex-basis:100%!important;margin-top:10px;}}
</style>
</body>
</html>
