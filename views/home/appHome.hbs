<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Video Conferencing</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f3f3f3;
      margin: 0;
      padding: 0;
    }
    #divUsers {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      padding: 20px;
    }
    .userbox {
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.2);
      padding: 10px;
      text-align: center;
    }
    .user-name {
      margin: 5px 0;
    }
    video, .video-box {
      width: 300px;
      height: 200px;
      background: black;
      border-radius: 8px;
    }
    #messages {
      margin: 20px;
      padding: 10px;
      background: #fff;
      border-radius: 8px;
      height: 150px;
      overflow-y: auto;
    }
    #msgbox {
      width: 70%;
      padding: 8px;
    }
    button {
      padding: 8px 15px;
      margin-left: 5px;
    }
  </style>
</head>
<body>
  <h1 style="text-align:center;">My Video Conferencing App</h1>

  <div id="divUsers">
    <div id="me" class="userbox">
      <h2 class="user-name">Me</h2>
      <video autoplay muted playsinline id="localVideoCtr" class="video-box"></video>
    </div>

    <div id="remoteTemplate" class="userbox" style="display:none">
      <h2 class="user-name"></h2>
      <video autoplay playsinline class="video-box"></video>
    </div>
  </div>

  <div id="messages"></div>
  <input type="text" id="msgbox" placeholder="Type message...">
  <button onclick="sendMessage()">Send</button>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const urlParams = new URLSearchParams(window.location.search);
    const meetingID = urlParams.get('meetingID');
    let userID = urlParams.get('uid');
    if (!userID) userID = prompt('Enter your nickname');

    const socket = io({ secure: true });
    const peers = {};
    let localStream;

    // --- Get camera + mic
    async function initLocalStream() {
      try {
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        const localVideo = document.getElementById('localVideoCtr');
        localVideo.srcObject = localStream;
      } catch (err) {
        console.error("Error accessing media devices:", err);
        alert("Could not access camera/microphone. Please allow permissions.");
      }
    }

    initLocalStream();

    // --- Join room
    socket.emit("joinRoom", { userID, meetingID });

    // --- Handle new user
    socket.on("newUser", ({ userID: remoteID }) => {
      createPeerConnection(remoteID, true);
    });

    // --- Handle offer
    socket.on("offer", async ({ from, offer }) => {
      createPeerConnection(from, false, offer);
    });

    // --- Handle answer
    socket.on("answer", async ({ from, answer }) => {
      await peers[from].setRemoteDescription(new RTCSessionDescription(answer));
    });

    // --- Handle ICE
    socket.on("iceCandidate", ({ from, candidate }) => {
      if (peers[from]) {
        peers[from].addIceCandidate(new RTCIceCandidate(candidate));
      }
    });

    // --- Messaging
    function sendMessage() {
      const msg = document.getElementById("msgbox").value;
      if (!msg) return;
      socket.emit("sendMessage", { userID, meetingID, msg });
      document.getElementById("messages").innerHTML += `<p><b>${userID}:</b> ${msg}</p>`;
      document.getElementById("msgbox").value = "";
    }

    socket.on("newMessage", ({ userID: from, msg }) => {
      document.getElementById("messages").innerHTML += `<p><b>${from}:</b> ${msg}</p>`;
    });

    // --- Peer connection
    async function createPeerConnection(remoteID, isInitiator, offer = null) {
      const pc = new RTCPeerConnection({
        iceServers: [
          { urls: "stun:stun.l.google.com:19302" }
        ]
      });

      peers[remoteID] = pc;

      // Add local tracks
      localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

      // Remote stream
      pc.ontrack = (event) => {
        let remoteBox = document.getElementById("user-" + remoteID);
        if (!remoteBox) {
          const template = document.getElementById("remoteTemplate");
          remoteBox = template.cloneNode(true);
          remoteBox.style.display = "block";
          remoteBox.id = "user-" + remoteID;
          remoteBox.querySelector("h2").innerText = remoteID;
          document.getElementById("divUsers").appendChild(remoteBox);
        }
        remoteBox.querySelector("video").srcObject = event.streams[0];
      };

      // ICE candidates
      pc.onicecandidate = (event) => {
        if (event.candidate) {
          socket.emit("iceCandidate", { to: remoteID, from: userID, candidate: event.candidate });
        }
      };

      // Offer/Answer
      if (isInitiator) {
        const offerDesc = await pc.createOffer();
        await pc.setLocalDescription(offerDesc);
        socket.emit("offer", { to: remoteID, from: userID, offer: offerDesc });
      } else if (offer) {
        await pc.setRemoteDescription(new RTCSessionDescription(offer));
        const answerDesc = await pc.createAnswer();
        await pc.setLocalDescription(answerDesc);
        socket.emit("answer", { to: remoteID, from: userID, answer: answerDesc });
      }
    }
  </script>
</body>
</html>
