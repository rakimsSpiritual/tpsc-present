<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>TeLis Video Classroom</title>
    <link href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css" rel="stylesheet">
    <script src="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
    <style>
        /* --- Existing CSS preserved --- */
        * { box-sizing: border-box; }
        body { background-color: #f5f5f5; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; height: 100vh; overflow: hidden; }
        .home-wrap { height: 100vh; }
        .g-top { height: 80vh; position: relative; }
        .top-remote-video-show-wrap { height: 100%; display: flex; }
        .call-wrap { height: 100%; border-radius: 8px; overflow: hidden; }
        .video-wrap { height: 100%; padding: 10px; display: flex; flex-wrap: wrap; }
        .userbox { flex: 1 1 300px; margin: 10px; background: #000; border-radius: 8px; overflow: hidden; position: relative; min-height: 200px; }
        .userbox video { width: 100%; height: 100%; object-fit: cover; }
        .userbox h2 { position: absolute; top: 10px; left: 10px; background: rgba(0,0,0,0.6); padding: 5px 10px; border-radius: 5px; color: white; z-index: 10; font-size: 14px; }
        .g-right-details-wrap { border-left: 1px solid #ddd; height: 100%; display: flex; flex-direction: column; background: #f9f9f9; color: #555; }
        .g-bottom { height: 10vh; padding: 0 20px; display: flex; justify-content: space-between; align-items: center; background: #f0f0f0; }
        .action-icon-style { width: 50px; height: 50px; border-radius: 50%; background: #eaebec; display: flex; justify-content: center; align-items: center; transition: all 0.3s; cursor: pointer; }
        .action-icon-style:hover { background: #d5d6d7; transform: scale(1.05); }
        .end-call-wrap { background: #ff3b30 !important; color: white; }
        .log-container { background: rgba(0, 0, 0, 0.7); color: white; padding: 10px; border-radius: 8px; max-height: 200px; overflow-y: auto; font-family: monospace; font-size: 12px; margin-top: 10px; display: none; }
        .log-entry { margin-bottom: 5px; padding: 3px; border-left: 3px solid #3498db; }
        .log-error { border-left-color: #e74c3c; }
        .log-success { border-left-color: #2ecc71; }
        .debug-toggle { position: absolute; bottom: 100px; right: 20px; z-index: 100; }
        @media (max-width: 768px) { .g-right-details-wrap { display: none !important; } .mobile-chat-toggle { display: block !important; position: fixed; bottom: 80px; right: 20px; z-index: 100; } }
    </style>
</head>
<body>
<main class="container-fluid d-flex flex-column home-wrap">
    <div class="g-top text-light">
        <div class="top-remote-video-show-wrap">
            <div id="meetingContainer" style="flex-basis: 75%;">
                <h1 id='meetingname'>Meeting Room</h1>
                <div class="call-wrap">
                    <div id='divUsers' class="video-wrap">
                        <div id="me" class="userbox">
                            <h2>You</h2>
                            <video autoplay muted id="localVideoCtr"></video>
                        </div>
                    </div>
                </div>
            </div>
            <div class="g-right-details-wrap" style="flex-basis: 25%;">
                <!-- Participant & Chat Panels -->
                <div class="meeting-heading-wrap d-flex justify-content-between align-items-center pr-3 pl-3" style="height: 10vh;">
                    <div class="meeting-heading font-weight-bold cursor-pointer">Meeting Details</div>
                    <div class="meeting-heading-cross cursor-pointer"><span class="material-icons">clear</span></div>
                </div>
                <div class="people-chat-wrap d-flex justify-content-between align-items-center border-bottom ml-3 mr-3 pl-3 pr-3" style="height: 10vh;font-size: 14px;">
                    <div class="people-heading display-center cursor-pointer">
                        <div class="people-heading-icon display-center mr-1"><span class="material-icons">people</span></div>
                        <div class="people-heading-text display-center">Participant (<span class="participant-count">1</span>)</div>
                    </div>
                    <div class="chat-heading display-center cursor-pointer">
                        <div class="chat-heading-icon display-center mr-1"><span class="material-icons">message</span></div>
                        <div class="chat-heading-text">Chat</div>
                    </div>
                </div>
                <div class="in-call-chat-wrap mr-3 ml-3 mt-4" style="font-size: 14px;">
                    <div class="chat-show-wrap text-secondary">
                        <div class="chat-message-show" id="messages"></div>
                        <div class="chat-message-sent d-flex justify-content-between align-items-center" style="margin-bottom: 35px;">
                            <input type="text" id="msgbox" class="chat-message-sent-input-field w-100" placeholder="Send a message to everyone" style="border: none; border-bottom: 1px solid teal;">
                            <div class="chat-message-sent-action display-center" id="btnsend" style="color: teal; cursor:pointer;"><span class="material-icons">send</span></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <button class="btn btn-sm btn-info debug-toggle" id="debugToggle">Debug</button>
        <button class="btn btn-sm btn-warning mobile-chat-toggle" id="mobileChatToggle">Chat</button>
        <div class="log-container" id="logContainer"></div>
    </div>

    <div class="g-bottom">
        <div class="d-flex">
            <div class="action-icon-style display-center mx-2 cursor-pointer" id="btnMuteUnmute"><span class="material-icons">mic</span></div>
            <div class="action-icon-style display-center mx-2 cursor-pointer end-call-wrap" id="btnEndCall"><span class="material-icons text-white">call_end</span></div>
            <div class="action-icon-style display-center mx-2 cursor-pointer" id="btnStartStopCam"><span class="material-icons">videocam</span></div>
        </div>
    </div>
    <input type="hidden" class="username_holder">
</main>

<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
let localStream = null;
let peerConnections = {};
let socket = null;
let meetingId = null;
let userId = null;
let configuration = { iceServers: [] };

// Logging
function log(msg, type='info') {
    const container = document.getElementById('logContainer');
    const entry = document.createElement('div');
    entry.className = 'log-entry ' + (type==='error'? 'log-error' : type==='success'? 'log-success':'');
    entry.textContent = `${new Date().toLocaleTimeString()}: ${msg}`;
    container.appendChild(entry);
    container.scrollTop = container.scrollHeight;
    console.log(msg);
}

// Fetch TURN/STUN servers dynamically with Xirsys fallback
async function fetchIceServers() {
    try {
        const res = await fetch('/turn-credentials');
        const data = await res.json();
        if(data.iceServers && data.iceServers.length > 0){
            configuration.iceServers = data.iceServers;
            log('Using dynamic ICE servers','success');
        } else {
            throw new Error('No ICE servers from API');
        }
    } catch(err) {
        log('Failed to fetch ICE servers, using fallback: ' + err.message,'error');
        configuration.iceServers = [
            { urls: [ "stun:jb-turn1.xirsys.com" ] },
            {
                username: "ydzCFyiUOl504sLLeswqK7d8MLZwCHOLFDOTJQg2nKg6x5madjZEkJYzy0n72UjQAAAAAGilmwBmcmFuY2lz",
                credential: "776888d6-7dab-11f0-89de-0242ac120004",
                urls: [
                    "turn:jb-turn1.xirsys.com:80?transport=udp",
                    "turn:jb-turn1.xirsys.com:3478?transport=udp",
                    "turn:jb-turn1.xirsys.com:80?transport=tcp",
                    "turn:jb-turn1.xirsys.com:3478?transport=tcp",
                    "turns:jb-turn1.xirsys.com:443?transport=tcp",
                    "turns:jb-turn1.xirsys.com:5349?transport=tcp"
                ]
            }
        ];
        log('Using hardcoded Xirsys ICE servers as fallback','success');
    }
}

// Initialize App
async function initApp() {
    const params = new URLSearchParams(window.location.search);
    meetingId = params.get('meetingID');
    userId = params.get('uid');
    if(!meetingId || !userId){
        window.location.href = '/sign';
        return;
    }
    document.querySelector('.username_holder').value = userId;

    await fetchIceServers();
    startLocalStream();
    connectSignaling();
}

// Local media
async function startLocalStream() {
    try {
        localStream = await navigator.mediaDevices.getUserMedia({ audio:true, video:true });
        document.getElementById('localVideoCtr').srcObject = localStream;
        log('Local media started','success');
    } catch(err){
        log('Failed to get local media: ' + err.message,'error');
    }
}

// Socket signaling
function connectSignaling() {
    socket = io();
    socket.on('connect', () => {
        log('Connected to signaling server','success');
        socket.emit('joinMeeting',{ meetingID: meetingId, userID: userId });
    });

    socket.on('newParticipant', (participants) => {
        participants.forEach(p => initPeerConnection(p));
    });

    socket.on('signal', async ({ from, data }) => {
        if(!peerConnections[from]) initPeerConnection(from, false);
        if(data.sdp){
            await peerConnections[from].setRemoteDescription(new RTCSessionDescription(data.sdp));
            if(data.sdp.type === 'offer'){
                const answer = await peerConnections[from].createAnswer();
                await peerConnections[from].setLocalDescription(answer);
                socket.emit('signal',{ from:userId, to:from, data:{ sdp:peerConnections[from].localDescription }});
            }
        } else if(data.candidate){
            await peerConnections[from].addIceCandidate(new RTCIceCandidate(data.candidate));
        }
    });

    socket.on('participantLeft', ({ userID }) => {
        if(peerConnections[userID]){
            peerConnections[userID].close();
            delete peerConnections[userID];
        }
        const elem = document.getElementById(userID);
        if(elem) elem.remove();
        log(`${userID} left the meeting`);
    });

    socket.on('receiveMessage', ({ userID, msg }) => {
        const messages = document.getElementById('messages');
        const entry = document.createElement('div');
        entry.textContent = `${userID}: ${msg}`;
        messages.appendChild(entry);
        messages.scrollTop = messages.scrollHeight;
    });
}

// Peer connection init
function initPeerConnection(remoteUserId, isInitiator=true){
    const pc = new RTCPeerConnection(configuration);
    peerConnections[remoteUserId] = pc;

    localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

    pc.onicecandidate = e => {
        if(e.candidate){
            socket.emit('signal',{ from:userId, to:remoteUserId, data:{ candidate:e.candidate }});
        }
    };

    pc.ontrack = e => {
        let remoteVideo = document.getElementById(remoteUserId);
        if(!remoteVideo){
            const container = document.getElementById('divUsers');
            const userbox = document.createElement('div');
            userbox.className = 'userbox';
            userbox.id = remoteUserId;
            const nameLabel = document.createElement('h2');
            nameLabel.textContent = remoteUserId;
            const video = document.createElement('video');
            video.autoplay = true;
            video.srcObject = e.streams[0];
            userbox.appendChild(nameLabel);
            userbox.appendChild(video);
            container.appendChild(userbox);
        }
    };

    if(isInitiator){
        pc.createOffer().then(offer => {
            pc.setLocalDescription(offer);
            socket.emit('signal',{ from:userId, to:remoteUserId, data:{ sdp: offer }});
        });
    }
}

// Chat send
document.getElementById('btnsend').addEventListener('click', () => {
    const msg = document.getElementById('msgbox').value.trim();
    if(!msg) return;
    socket.emit('sendMessage',{ meetingID: meetingId, userID: userId, msg });
    document.getElementById('msgbox').value = '';
});

// Init app
initApp();
</script>
</body>
</html>
